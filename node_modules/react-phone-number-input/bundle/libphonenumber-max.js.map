{"version":3,"sources":["webpack://libphonenumber/webpack/universalModuleDefinition","webpack://libphonenumber/webpack/bootstrap","webpack://libphonenumber/./es6/metadata.js","webpack://libphonenumber/./es6/constants.js","webpack://libphonenumber/./es6/getNumberType_.js","webpack://libphonenumber/./es6/util.js","webpack://libphonenumber/./es6/findNumbers/util.js","webpack://libphonenumber/./es6/PhoneNumber.js","webpack://libphonenumber/./es6/parsePhoneNumber.js","webpack://libphonenumber/./es6/PhoneNumberMatcher.js","webpack://libphonenumber/./es6/validate_.js","webpack://libphonenumber/./es6/RFC3966.js","webpack://libphonenumber/./es6/parseDigits.js","webpack://libphonenumber/./es6/parseIncompletePhoneNumber.js","webpack://libphonenumber/./es6/extension.js","webpack://libphonenumber/./es6/parse_.js","webpack://libphonenumber/./es6/ParseError.js","webpack://libphonenumber/./es6/AsYouType.js","webpack://libphonenumber/./es6/findNumbers/utf-8.js","webpack://libphonenumber/./es6/format_.js","webpack://libphonenumber/./es6/IDD.js","webpack://libphonenumber/./es6/isPossibleNumber_.js","webpack://libphonenumber/./es6/isViablePhoneNumber.js","webpack://libphonenumber/./es6/parsePhoneNumber_.js","webpack://libphonenumber/./metadata.full.json.js","webpack://libphonenumber/./es6/formatIncompletePhoneNumber.js","webpack://libphonenumber/./es6/getExampleNumber.js","webpack://libphonenumber/./es6/searchNumbers.js","webpack://libphonenumber/./es6/findNumbers/isValidCandidate.js","webpack://libphonenumber/./es6/findNumbers/isValidPreCandidate.js","webpack://libphonenumber/./es6/findNumbers/parsePreCandidate.js","webpack://libphonenumber/./es6/findNumbers/Leniency.js","webpack://libphonenumber/./es6/findNumbers/LRUCache.js","webpack://libphonenumber/./es6/findNumbers/RegExpCache.js","webpack://libphonenumber/./es6/findNumbers_.js","webpack://libphonenumber/./es6/findNumbers.js","webpack://libphonenumber/./es6/parsePhoneNumberFromString_.js","webpack://libphonenumber/./es6/parsePhoneNumberFromString.js","webpack://libphonenumber/./es6/isValidNumberForRegion_.js","webpack://libphonenumber/./es6/getCountryCallingCode.js","webpack://libphonenumber/./es6/tools/semver-compare.js","webpack://libphonenumber/./core/index.js","webpack://libphonenumber/./max/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","validateMetadata","getExtPrefix","country","metadata","Metadata","hasCountry","ext","DEFAULT_EXT_PREFIX","getCountryCallingCode","countryCallingCode","Error","isSupportedCountry","undefined","countries","_semverCompare","_typeof","Symbol","_typeof2","iterator","obj","constructor","_createClass","defineProperties","target","props","length","descriptor","writable","key","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","V3","this","v1","version","v2","_semverCompare2","default","v3","_country","country_metadata","countryCallingCodes","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","_","Format","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","getType","Type","country_phone_code_to_countries","country_calling_codes","country_calling_code","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","test","replace","type","possibleLengths","is_object","keys","join","type_of","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","WHITESPACE","VALID_PUNCTUATION","PLUS_CHARS","input","options","arguments","_metadata2","nationalNumber","phone","_util","matchesEntirely","nationalNumberPattern","is_of_type","pattern","_iterator","NON_FIXED_LINE_PHONE_TYPES","_isArray","Array","isArray","_i","_ref","next","done","checkNumberLengthForType","type_info","possible_lengths","mobile_type","mergeArrays","actual_length","minimum_length","indexOf","_metadata","text","regular_expression","RegExp","a","b","merged","slice","element","push","sort","limit","lower","upper","trimAfterFirstMatch","regexp","string","index","search","startsWith","substring","endsWith","_extends","assign","source","PhoneNumber","isCountryCode","_metadata3","number","_isPossibleNumber_2","_validate_2","_getNumberType_2","_format_2","_normalizeArguments","normalizeArguments","_parsePhoneNumber_2","_parsePhoneNumber_","_slicedToArray","arr","_arr","_n","_d","_e","_s","err","sliceIterator","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","defaultCountry","_constants","_extension","_utf","_isValidCandidate","INNER_MATCHES","pZ","PZ","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","pNd","PATTERN","LEAD_CLASS","EXTN_PATTERNS_FOR_MATCHING","UNWANTED_END_CHAR_PATTERN","_pN","_pL","MAX_SAFE_INTEGER","Number","Math","pow","PhoneNumberMatcher","state","searchIndex","regExpCache","_RegExpCache2","leniency","extended","maxTries","_Leniency2","matches","exec","candidate","offset","_parsePreCandidate2","_isValidPreCandidate2","match","parseAndVerify","extractInnerMatch","phoneNumber","_PhoneNumber2","startsAt","endsAt","isFirstMatch","possibleInnerMatch","_group","_match","group","_isValidCandidate2","_parse_2","possible","result","lastMatch","find","hasNext","national_number","parseRFC3966","split","part","_part$split","_part$split2","_isViablePhoneNumber2","formatRFC3966","_ref2","_isViablePhoneNumber","parseDigit","character","digit","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parsePhoneNumberCharacter","_parseDigits","extractExtension","start","EXTN_PATTERN","number_without_extension","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","_ParseError2","_parse_input","_RFC","extract_formatted_phone_number","with_extension_stripped","parse_input","formatted_phone_number","_parse_phone_number","default_country","_extractCountryCallin","extractCountryCallingCode","chooseCountryByCountryCallingCode","_getCountryCallingCode2","_parse_national_numbe","_parseIncompletePhoneNumber2","carrier_code","_strip_national_prefi","strip_national_prefix_and_carrier_code","potential_national_number","carrierCode","_getNumberType_","parse_national_number","exactCountry","find_country_code","parse_phone_number","selectedCountry","valid","_isPossibleNumber_","is_possible_number","_IDD","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","national_phone_number","possible_countries","leadingDigits","_find_country_code","numberWithoutIDD","stripIDDPrefix","ParseError","code","message","stack","create","strip_dangling_braces","cut_stripping_dangling_braces","close_dangling_braces","template","cut_before","retained_template","opening_braces","count_occurences","closing_braces","dangling_braces","repeat","_parse_","_format_","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","reset","extracted_number","processInput","currentOutput","parsedInput","resetCountriness","isInternational","determineTheCountry","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","available_formats","partially_populated_template","last_match_position","filter","internationalFormat","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leadingDigitsPatterns","leading_digits_pattern_index","min","leading_digits_pattern","isFormatApplicable","format_national_number_using_format","createFormattingTemplate","full_number","formattedNationalNumber","isPossibleNumber","_iterator2","_isArray2","_i2","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","_ref3","changeInternationalFormatStyle","FIRST_GROUP_PATTERN","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","cut_before_index","symbol","count","_iterator5","_isArray5","_i5","_ref5","times","isLatinLetter","letter","pL_regexp","pMn_regexp","latinLetterRegexp","isInvalidPunctuationSymbol","pSc_regexp","_pZ","defaultOptions","addExtension","format_national_number","formatExtension","fromCountry","IDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","formatIDDSameCountryCallingCodeNumber","choose_format_for_number","formattedNumber","extension","useInternationalFormat","includeNationalPrefixForNationalFormat","format_as","last_leading_digits_pattern","local","trim","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","countryMetadata","SINGLE_IDD_PREFIX","defaultIDDPrefix","IDDPrefixPattern","matchedGroups","CAPTURING_DIGIT_PATTERN","is_international","VALID_PHONE_NUMBER_PATTERN","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","20","27","30","31","32","33","34","36","39","40","41","43","44","45","46","47","48","49","51","52","53","54","55","56","57","58","60","61","62","63","64","65","66","81","82","84","86","90","91","92","93","94","95","98","211","212","213","216","218","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","260","261","262","263","264","265","266","267","268","269","290","291","297","298","299","350","351","352","353","354","355","356","357","358","359","370","371","372","373","374","375","376","377","378","380","381","382","383","385","386","387","389","420","421","423","500","501","502","503","504","505","506","507","508","509","590","591","592","593","594","595","596","597","598","599","670","672","673","674","675","676","677","678","679","680","681","682","683","685","686","687","688","689","690","691","692","800","808","850","852","853","855","856","870","878","880","881","882","883","886","888","960","961","962","963","964","965","966","967","968","970","971","972","973","974","975","976","977","979","992","993","994","995","996","998","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","001","_AsYouType2","_AsYouType","examples","_PhoneNumber","_parsePhoneNumber","matcher","_PhoneNumberMatcher2","_defineProperty","_PhoneNumberMatcher","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","LEAD_CLASS_LEADING","previousChar","lastCharIndex","nextChar","BRACKET_PAIR_LIMIT","SLASH_SEPARATED_DATES","TIME_STAMPS","followingText","TIME_STAMPS_SUFFIX_LEADING","SECOND_NUMBER_START_PATTERN","containsMoreThanOneSlashInNationalNumber","containsOnlyValidXChars","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","_parseDigits2","isNationalPrefixPresentIfRequired","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkNumberGroupingIsValid","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","formatNumber","endIndex","startIndex","allNumberGroupsAreExactlyPresent","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","allNumberGroupsRemainGrouped","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","POSSIBLE","VALID","toString","STRICT_GROUPING","candidateString","EXACT_GROUPING","Node","prev","LRUCache","size","head","tail","cache","ensureLimit","node","remove","put","console","log","_LRUCache","RegExpCache","_LRUCache2","regExp","results","_findNumbers_2","_findNumbers_","error","_parsePhoneNumberFromString_2","_parsePhoneNumberFromString_","_validate_","pa","pb","na","nb","isNaN","_index","parseIncompletePhoneNumber","parseDigits","parsePhoneNumber","parsePhoneNumberFromString","findNumbers","searchNumbers","getExampleNumber","formatIncompletePhoneNumber","_metadataFullJson","func","_arguments","_metadataFullJson2","apply"],"mappings":"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M,KAAK,KAAK,KAAK,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,KAAK,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,KAAK,KAAK,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAM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","file":"libphonenumber-max.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"libphonenumber\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"libphonenumber\"] = factory();\n\telse\n\t\troot[\"libphonenumber\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 40);\n","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from './tools/semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when parsing\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormatting',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormatting() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nexport function isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport function mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n\tif (lower < 0 || upper <= 0 || upper < lower) {\n\t\tthrow new TypeError();\n\t}\n\treturn \"{\" + lower + \",\" + upper + \"}\";\n}\n\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\nexport function trimAfterFirstMatch(regexp, string) {\n\tvar index = string.search(regexp);\n\n\tif (index >= 0) {\n\t\treturn string.slice(0, index);\n\t}\n\n\treturn string;\n}\n\nexport function startsWith(string, substring) {\n\treturn string.indexOf(substring) === 0;\n}\n\nexport function endsWith(string, substring) {\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\n\nexport default function parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumber_(text, options, metadata);\n}\n\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\n\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\n\nimport RegExpCache from './findNumbers/RegExpCache';\n\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\n\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\n\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\n\nimport { isSupportedCountry } from './metadata';\n\nimport parseNumber from './parse_';\n\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\nvar INNER_MATCHES = [\n// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/',\n\n// Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)',\n\n// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + pZ + '-|-' + pZ + ')' + pZ + '*(.+)',\n\n// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n'[\\u2012-\\u2015\\uFF0D]' + pZ + '*(.+)',\n\n// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + pZ + '*([^.]+)',\n\n// Breaks on space - e.g. \"3324451234 8002341234\"\npZ + '+(' + PZ + '+)'];\n\n// Limit on the number of leading (plus) characters.\nvar leadLimit = limit(0, 2);\n\n// Limit on the number of consecutive punctuation characters.\nvar punctuationLimit = limit(0, 4);\n\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE;\n\n// Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\nvar blockLimit = limit(0, digitBlockLimit);\n\n/* A punctuation sequence allowing white space. */\nvar punctuation = '[' + VALID_PUNCTUATION + ']' + punctuationLimit;\n\n// A digits block without punctuation.\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?';\n\n// Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _pN + _pL + '#]+$');\n\nvar NON_DIGITS_PATTERN = /(\\D+)/;\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n    this.regExpCache = new RegExpCache(32);\n\n    options = _extends({}, options, {\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n\n    /** The degree of validation requested. */\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n\n    /** The maximum number of retries after matching an invalid number. */\n    this.maxTries = options.maxTries;\n\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /** The iteration tristate. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n\n      var matches = void 0;\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match =\n          // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text)\n          // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata);\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]);\n\n          // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      }\n\n      // Don't retain that memory any longer than necessary.\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport default PhoneNumberMatcher;\n//# sourceMappingURL=PhoneNumberMatcher.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn '+';\n\t}\n\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parse_input = parse_input(text, options.v2),\n\t    formatted_phone_number = _parse_input.number,\n\t    ext = _parse_input.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formatted_phone_number) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parse_phone_number = parse_phone_number(formatted_phone_number, options.defaultCountry, metadata),\n\t    country = _parse_phone_number.country,\n\t    nationalNumber = _parse_phone_number.national_number,\n\t    countryCallingCode = _parse_phone_number.countryCallingCode,\n\t    carrierCode = _parse_phone_number.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\nexport function extract_formatted_phone_number(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn;\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n\tif (!number || !metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// In many countries the national prefix\n\t// is not just a constant digit (like `0` in UK)\n\t// but can be different depending on the phone number\n\t// (and can be also absent for some phone numbers).\n\t//\n\t// So `national_prefix_for_parsing` is used when parsing\n\t// a national-prefixed (local) phone number\n\t// into a national significant phone number\n\t// extracting that possible national prefix out of it.\n\t//\n\t// Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\n\t// Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn { number: number };\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// In more complex cases just `national_prefix_for_parsing` regexp\n\t// is not enough to extract the national number and then strip it\n\t// like `number.slice(national_prefix.length)` because when parsing\n\t// national numbers it's not always clear whether the first digits\n\t// are a national prefix or part of the national significant number.\n\t// For such cases `national_prefix_transform_rule` regexp is present\n\t// which contains \"capturing groups\" that are later used in such\n\t// `national_prefix_transform_rule` to transform the national number\n\t// being parsed into the national significant number.\n\t//\n\t// Example.\n\t// Country: U.S. Virgin Islands (VI).\n\t// Country calling code: +1.\n\t// Leading digits: 340.\n\t// Phone number format: +1 (340) xxx-xxxx.\n\t// National prefix: 1.\n\t// National prefix for parsing: 1|([2-9]\\d{6})$.\n\t// National prefix transform rule: 340$1.\n\t//\n\t// So for input \"13401234567\" \"national prefix for parsing\" regexp\n\t// will return \"1\" and the national significant number will be\n\t// \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\n\t//\n\t// And for input \"3401234567\" \"national prefix for parsing\" regexp\n\t// the \"captured group\" will be \"3401234567\" and the national significant\n\t// number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\n\t//\n\t// `national_prefix_matcher[captured_groups_count]` means that\n\t// the corresponding \"captured group\" is not empty.\n\t// It can be empty if the regexp either doesn't have any \"capturing groups\"\n\t// or if the \"capturing groups\" are defined as optional.\n\t// Example: \"0?(?:...)?\" for Argentina.\n\t//\n\tvar captured_groups_count = national_prefix_matcher.length - 1;\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n\t}\n\t// If it's a simple-enough case then just strip the national prefix from the number.\n\telse {\n\t\t\t// National prefix is the whole substring matched by\n\t\t\t// the `national_prefix_for_parsing` regexp.\n\t\t\tvar national_prefix = national_prefix_matcher[0];\n\t\t\tnational_significant_number = number.slice(national_prefix.length);\n\t\t}\n\n\tvar carrierCode = void 0;\n\tif (captured_groups_count > 0) {\n\t\tcarrierCode = national_prefix_matcher[1];\n\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\n\t// {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: national_significant_number,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_calling_code` is always valid\n\tvar possible_countries = metadata.countryCallingCodes()[country_calling_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n\tmetadata = new Metadata(metadata);\n\n\tfor (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: national_phone_number, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parse_input(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\n\tvar number = extract_formatted_phone_number(text, v2);\n\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\nfunction parse_phone_number(formatted_phone_number, default_country, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t} else if (default_country) {\n\t\tmetadata.country(default_country);\n\t\tcountry = default_country;\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata);\n\t} else return {};\n\n\tvar _parse_national_numbe = parse_national_number(number, metadata),\n\t    national_number = _parse_national_numbe.national_number,\n\t    carrier_code = _parse_national_numbe.carrier_code;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = find_country_code(countryCallingCode, national_number, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnational_number: national_number,\n\t\tcarrierCode: carrier_code\n\t};\n}\n\nfunction parse_national_number(number, metadata) {\n\tvar national_number = parseIncompletePhoneNumber(number);\n\tvar carrier_code = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(national_number, metadata),\n\t    potential_national_number = _strip_national_prefi.number,\n\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (checkNumberLengthForType(potential_national_number, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnational_number = potential_national_number;\n\t\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(national_number, metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnational_number = potential_national_number;\n\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnational_number: national_number,\n\t\tcarrier_code: carrier_code\n\t};\n}\n\n// Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parse_phone_number(number, null, metadata).country\n// }\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode as _extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\n\nimport { checkNumberLengthForType } from './getNumberType_';\n\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = extract_formatted_phone_number(text) || '';\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n\t\t\t\treturn this.currentOutput;\n\t\t\t}\n\n\t\t\treturn this.processInput(parseIncompletePhoneNumber(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'processInput',\n\t\tvalue: function processInput(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsedInput) {\n\t\t\t\t\tthis.parsedInput += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.resetCountriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsedInput += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.nationalNumber += input;\n\n\t\t\t// TODO: Deprecated: rename `this.nationalNumber`\n\t\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.nationalNumber) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extractNationalPrefix();\n\n\t\t\t\tif (this.nationalPrefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = undefined;\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if (!this.shouldFormat())\n\t\t\t// {\n\t\t\t// \treturn this.format_as_non_formatted_number()\n\t\t\t// }\n\n\t\t\tif (!this.nationalNumber) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.formatNationalNumber(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.formatFullNumber(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.format_as_non_formatted_number();\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\t// Strip national prefix for incorrectly inputted international phones.\n\t\t\tif (this.isInternational() && this.countryCallingCode) {\n\t\t\t\treturn '+' + this.countryCallingCode + this.nationalNumber;\n\t\t\t}\n\n\t\t\treturn this.parsedInput;\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumber',\n\t\tvalue: function formatNationalNumber(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosenFormat) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.chooseAnotherFormat()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsedInput = '';\n\n\t\t\tthis.currentOutput = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tthis.nationalNumber = '';\n\t\t\tthis.carrierCode = '';\n\n\t\t\tthis.resetCountriness();\n\n\t\t\tthis.resetFormat();\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'resetCountry',\n\t\tvalue: function resetCountry() {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.country = undefined;\n\t\t\t} else {\n\t\t\t\tthis.country = this.defaultCountry;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetCountriness',\n\t\tvalue: function resetCountriness() {\n\t\t\tthis.resetCountry();\n\n\t\t\tif (this.defaultCountry && !this.isInternational()) {\n\t\t\t\tthis.metadata.country(this.defaultCountry);\n\t\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode();\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t} else {\n\t\t\t\tthis.metadata.country(undefined);\n\t\t\t\tthis.countryCallingCode = undefined;\n\n\t\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_calling_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_calling_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = this.metadata.formats().filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\n\t\t\tthis.matching_formats = undefined;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.nationalNumber;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digits patterns already match for a single first digit.\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\n\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\tvar available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n\t\t\tthis.had_enough_leading_digits = this.shouldFormat();\n\n\t\t\tthis.matching_formats = available_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_patterns_count = format.leadingDigitsPatterns().length;\n\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leading_digits_patterns_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n\t\t\t\tvar leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'shouldFormat',\n\t\tvalue: function shouldFormat() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Presumably the limitation of \"3 digits min\"\n\t\t\t// is imposed to exclude false matches,\n\t\t\t// e.g. when there are two different formats\n\t\t\t// each one fitting one or two leading digits being input.\n\t\t\t// But for this case I would propose a specific `if/else` condition.\n\t\t\t//\n\t\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// `leadingDigitsPattern` also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tfor (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n\t\t\t\tif (!matcher.test(this.nationalNumber)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\tvar formatted_number = format_national_number_using_format(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata);\n\n\t\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\n\t\t\t\t\tformatted_number = '1 ' + formatted_number;\n\t\t\t\t}\n\n\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t//\n\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t// with the current metadata,\n\t\t\t\t// but just in case.\n\t\t\t\t//\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\tvar full_number = this.formatFullNumber(formatted_number);\n\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t}\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'formatFullNumber',\n\t\tvalue: function formatFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = _extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\n\t\t\t// Sometimes people erroneously write national prefix\n\t\t\t// as part of an international number, e.g. +44 (0) ....\n\t\t\t// This violates the standards for international phone numbers,\n\t\t\t// so \"As You Type\" formatter assumes no national prefix\n\t\t\t// when parsing a phone number starting from `+`.\n\t\t\t// Even if it did attempt to filter-out that national prefix\n\t\t\t// it would look weird for a user trying to enter a digit\n\t\t\t// because from user's perspective the keyboard \"wouldn't be working\".\n\t\t\tthis.nationalNumber = number;\n\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata),\n\t\t\t    potential_national_number = _strip_national_prefi.number,\n\t\t\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n\t\t\tthis.nationalNumber = potential_national_number;\n\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseAnotherFormat',\n\t\tvalue: function chooseAnotherFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t// then extract the template from this format\n\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// No format matches the phone number,\n\t\t\t// therefore set `country` to `undefined`\n\t\t\t// (or to the default country).\n\t\t\tthis.resetCountry();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.resetFormat();\n\t\t}\n\t}, {\n\t\tkey: 'isFormatApplicable',\n\t\tvalue: function isFormatApplicable(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// If this format doesn't use national prefix\n\t\t\t// but the user did input national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format) {\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tnumber_pattern = number_pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.getFormatFormat(format);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumber : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\n\t\t\t\t\t// later in code.\n\t\t\t\t\tthis.chosenFormat = undefined;\n\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.parsedInput && this.parsedInput[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn changeInternationalFormatStyle(format.internationalFormat());\n\t\t\t}\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix()) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n\t\t\t\t\treturn '1 ' + format.format();\n\t\t\t\t}\n\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!this.countryCallingCode || !this.nationalNumber) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar index = -1;\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < this.parsedInput.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn cut_stripping_dangling_braces(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function strip_dangling_braces(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\n\treturn cleared_string;\n}\n\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n\tif (string[cut_before_index] === ')') {\n\t\tcut_before_index++;\n\t}\n\treturn strip_dangling_braces(string.slice(0, cut_before_index));\n}\n\nexport function close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\n\nvar _pZ = ' \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000';\nexport var pZ = '[' + _pZ + ']';\nexport var PZ = '[^' + _pZ + ']';\n\nexport var _pN = '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\n// const pN = `[${_pN}]`\n\nvar _pNd = '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\nexport var pNd = '[' + _pNd + ']';\n\nexport var _pL = 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC';\nvar pL = '[' + _pL + ']';\nvar pL_regexp = new RegExp(pL);\n\nvar _pSc = '$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6';\nvar pSc = '[' + _pSc + ']';\nvar pSc_regexp = new RegExp(pSc);\n\nvar _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26';\nvar pMn = '[' + _pMn + ']';\nvar pMn_regexp = new RegExp(pMn);\n\nvar _InBasic_Latin = '\\0-\\x7F';\nvar _InLatin_1_Supplement = '\\x80-\\xFF';\nvar _InLatin_Extended_A = '\\u0100-\\u017F';\nvar _InLatin_Extended_Additional = '\\u1E00-\\u1EFF';\nvar _InLatin_Extended_B = '\\u0180-\\u024F';\nvar _InCombining_Diacritical_Marks = '\\u0300-\\u036F';\n\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\n\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar defaultOptions = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, defaultOptions, options);\n\t} else {\n\t\toptions = defaultOptions;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n\tif (useInternationalFormat) {\n\t\treturn changeInternationalFormatStyle(formattedNumber);\n\t}\n\n\treturn formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n\tvar format = choose_format_for_number(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n\tfor (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(national_number, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function changeInternationalFormatStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t\t}\n\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t}\n}\n//# sourceMappingURL=format_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(text, options, metadata) {\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":\"1.7.20\",\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"800\":[\"001\"],\"808\":[\"001\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"870\":[\"001\"],\"878\":[\"001\"],\"880\":[\"BD\"],\"881\":[\"001\"],\"882\":[\"001\"],\"883\":[\"001\"],\"886\":[\"TW\"],\"888\":[\"001\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"979\":[\"001\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6],0,0,0,0,0,0,0,[[\"6[2-467]\\\\d{3}\",[5]],[\"4\\\\d{4}\",[5]],0,0,0,0,[\"(?:0[1-9]|[1589]\\\\d)\\\\d{4}\",[6]]]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[136-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[136-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[[\"[78]\\\\d{5}\",[6]],[\"690\\\\d{6}|[36]\\\\d{5}\",[6,9]],[\"180[02]\\\\d{4}\",[8]],[\"[19]\\\\d{5}\",[6]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[2-4679][2-8]\\\\d{6}\",[8]],[\"5[024-68]\\\\d{7}\",[9]],[\"400\\\\d{6}|800\\\\d{2,9}\"],[\"900[02]\\\\d{5}\",[9]],0,0,[\"600[25]\\\\d{5}\",[9]],0,0,[\"700[05]\\\\d{5}\",[9]]]],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[25][0-8]|[34][0-4]|6[0-5])[2-9]\\\\d{6}\"],[\"7(?:[014-9]\\\\d|2[89]|3[01])\\\\d{6}\"]]],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\",[[\"268(?:4(?:6[0-38]|84)|56[0-2])\\\\d{4}\"],[\"268(?:464|7(?:1[3-9]|2\\\\d|3[246]|64|[78][0-689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"26840[69]\\\\d{4}\"],[\"26848[01]\\\\d{4}\"]]],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\",[[\"2644(?:6[12]|9[78])\\\\d{4}\"],[\"264(?:235|476|5(?:3[6-9]|8[1-4])|7(?:29|72))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[2358](?:[16-9]\\\\d[2-9]|[2-5][2-9]\\\\d)|4(?:[2-57-9][2-9]|6\\\\d)\\\\d)\\\\d{4}\",[8]],[\"6(?:[689][2-9]|7[2-6])\\\\d{6}\",[9]],[\"800\\\\d{4}\",[7]],[\"900[1-9]\\\\d\\\\d\",[6]],[\"700[2-9]\\\\d{4}\",[8]],0,0,0,0,[\"808[1-9]\\\\d\\\\d\",[6]]]],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:1[0-2]|47)\\\\d|2(?:2[2-46]|3[1-8]|4[2-69]|5[2-7]|6[1-9]|8[1-7])|3[12]2)\\\\d{5}\"],[\"(?:4[1349]|55|77|88|9[13-9])\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[016]\\\\d{5}\"],0,0,0,0,[\"60(?:2[78]|3[5-9]|4[02-9]|5[0-46-9]|[6-8]\\\\d|90)\\\\d{4}\"],[\"80[1-4]\\\\d{5}\"]]],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]],0,0,0,0,0,0,[[\"2\\\\d(?:[0134][25-9]|[25-9]\\\\d)\\\\d{5}\"],[\"9[1-49]\\\\d{7}\"]]],\"AR\":[\"54\",\"00\",\"11\\\\d{8}|(?:[2368]|9\\\\d)\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\",0,0,[[\"(?:2(?:646[0-46-9]|9(?:45[02-69]|54[2-8]))|3(?:4(?:3(?:5[0-7]|6[1-69])|5(?:4[0-4679]|[56][024-6]))|585[013-7]|7(?:(?:1[15]|81)[46]|77[2-8])|8(?:(?:21|4[16]|9[12])[46]|35[124-6]|5(?:5[0-46-9]|6[0-246-9])|6(?:5[2-8]|9[46])|86[0-68])))\\\\d{5}|(?:2(?:284|657|9(?:20|66))|3(?:4(?:8[27]|92)|755|878))[2-7]\\\\d{5}|(?:2(?:2(?:2[59]|44|52)|3(?:26|4[24])|473|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|(?:2(?:(?:26|62)2|3(?:02|2[03])|477|9(?:42|83))|3(?:4(?:[47]6|62|89)|5(?:41|64)|873))[2-6]\\\\d{5}|(?:(?:11[2-7]|670)\\\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-7]|[346][45])|80[45]|9(?:[17][4-6]|44|8[45]|9[3-6]))|3(?:364|4(?:1[2-7]|2[4-6]|[38]4)|5(?:1[2-8]|3[4-6]|8[46])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|1[2-6]|34|5[34]|7[24-6]|8[3-5])))\\\\d{6}|2(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|475|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|(?:2(?:2(?:57|81)|3(?:24|46|92)|9(?:01|23|64))|3(?:329|4(?:42|71)|5(?:25|37|4[347]|71)|7(?:18|5[17])|888))[3-6]\\\\d{5}|(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|[24]5|5[25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[03-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[145]|4[13]|5[468]|7[2-5]|8[26])|8(?:2[5-7]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\",[10]],[\"9(?:2(?:646[0-46-9]|9(?:45[02-69]|54[2-8]))|3(?:4(?:3(?:5[0-7]|6[1-69])|5(?:4[0-4679]|[56][024-6]))|585[013-7]|7(?:(?:1[15]|81)[46]|77[2-8])|8(?:(?:21|4[16]|9[12])[46]|35[124-6]|5(?:5[0-46-9]|6[0-246-9])|6(?:5[2-8]|9[46])|86[0-68])))\\\\d{5}|9(?:2(?:284|657|9(?:20|66))|3(?:4(?:8[27]|92)|755|878))[2-7]\\\\d{5}|9(?:2(?:2(?:2[59]|44|52)|3(?:26|4[24])|473|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|9(?:2(?:(?:26|62)2|3(?:02|2[03])|477|9(?:42|83))|3(?:4(?:[47]6|62|89)|5(?:41|64)|873))[2-6]\\\\d{5}|(?:675\\\\d|9(?:11[2-7]\\\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-7]|[346][45])|80[45]|9(?:[17][4-6]|44|8[45]|9[3-6]))|3(?:364|4(?:1[2-7]|2[4-6]|[38]4)|5(?:1[2-8]|3[4-6]|8[46])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|1[2-6]|34|5[34]|7[24-6]|8[3-5]))))\\\\d{6}|92(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|475|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|9(?:2(?:2(?:57|81)|3(?:24|46|92)|9(?:01|23|64))|3(?:329|4(?:42|71)|5(?:25|37|4[347]|71)|7(?:18|5[17])|888))[3-6]\\\\d{5}|9(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|[24]5|5[25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[03-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[145]|4[13]|5[468]|7[2-5]|8[26])|8(?:2[5-7]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\"],[\"800\\\\d{7}\",[10]],[\"60[04579]\\\\d{7}\",[10]],0,0,[\"810\\\\d{7}\",[10]]]],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\",[[\"6846(?:22|33|44|55|77|88|9[19])\\\\d{4}\"],[\"684(?:2(?:5[2468]|72)|7(?:3[13]|70))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:11\\\\d|[2-9]\\\\d{3,11})|(?:316|463|(?:51|66|73)2)\\\\d{3,10}|(?:2(?:1[467]|2[13-8]|5[2357]|6[1-46-8]|7[1-8]|8[124-7]|9[1458])|3(?:1[1-578]|3[23568]|4[5-7]|5[1378]|6[1-38]|8[3-68])|4(?:2[1-8]|35|7[1368]|8[2457])|5(?:2[1-8]|3[357]|4[147]|5[12578]|6[37])|6(?:13|2[1-47]|4[135-8]|5[468])|7(?:2[1-8]|35|4[13478]|5[68]|6[16-8]|7[1-6]|9[45]))\\\\d{4,10}\"],[\"6(?:5[0-3579]|6[013-9]|[7-9]\\\\d)\\\\d{4,10}\",[7,8,9,10,11,12,13]],[\"800\\\\d{6,10}\",[9,10,11,12,13]],[\"9(?:0[01]|3[019])\\\\d{6,10}\",[9,10,11,12,13]],0,0,0,0,[\"5(?:0[1-9]|17|[79]\\\\d)\\\\d{2,10}|7[28]0\\\\d{6,10}\",[5,6,7,8,9,10,11,12,13]],[\"8(?:10|2[018])\\\\d{6,10}|828\\\\d{5}\",[8,9,10,11,12,13]]]],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7,8}|8[0-24-9]\\\\d{7})|(?:[2-478]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{4,7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:[237]\\\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\\\d|4[0-4]))|(?:[6-8]\\\\d{3}|9(?:[02-9]\\\\d\\\\d|1(?:[0-57-9]\\\\d|6[0135-9])))\\\\d))\\\\d{3}\",[9]],[\"4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[017-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"16\\\\d{3,7}\",[5,6,7,8,9]],[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]],0,0,0,0,0,0,[[\"5(?:2\\\\d|8[1-9])\\\\d{4}\"],[\"(?:290|5[69]\\\\d|6(?:[03]0|22|4[0-2]|[69]\\\\d)|7(?:[34]\\\\d|7[07])|9(?:6[45]|9[4-8]))\\\\d{4}\"],[\"800\\\\d{4}\"],[\"900\\\\d{4}\"],0,0,0,0,[\"(?:28\\\\d|501)\\\\d{4}\"]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|(?:[147]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10],0,\"0\",0,0,0,0,\"18\",[[\"18[1-8]\\\\d{3,6}\",[6,7,8,9]],[\"(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"(?:10|[23][09])\\\\d{4,8}|60(?:[12]\\\\d{5,6}|6\\\\d{7})|7(?:(?:1|3\\\\d)\\\\d{7}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d\"]],\"00\"],\"AZ\":[\"994\",\"00\",\"(?:365\\\\d{3}|900200)\\\\d{3}|(?:[12457]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[12]|365\",\"[12]|365\",\"[12]|365(?:[0-46-9]|5[0-35-9])\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[3-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"365(?:[0-46-9]\\\\d|5[0-35-9])\\\\d{4}|(?:1[28]\\\\d|2(?:[045]2|1[24]|2[2-4]|33|6[23]))\\\\d{6}\"],[\"36554\\\\d{4}|(?:4[04]|5[015]|60|7[07])\\\\d{7}\"],[\"88\\\\d{7}\"],[\"900200\\\\d{3}\"]]],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-356]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[05-79][2-9]|1[4579]|[23][24-9]|4[2-4689]|8[2457-9])|49[2-579]|5(?:0[2-49]|[13][2-9]|[268][2-4679]|4[4689]|5[2-79]|7[2-69]|9[2-4689]))\\\\d{5}\",[8]],[\"6(?:0(?:3\\\\d|40)|[1-356]\\\\d|44[0-6]|71[137])\\\\d{5}\"],[\"8[08]\\\\d{6}\",[8]],[\"9[0246]\\\\d{6}\",[8]],0,0,[\"70(?:3[0146]|[56]0)\\\\d{4}\",[8]],0,0,[\"8[12]\\\\d{6}\",[8]]]],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\",[[\"246(?:2(?:2[78]|7[0-4])|4(?:1[024-6]|2\\\\d|3[2-9])|5(?:20|[34]\\\\d|54|7[1-3])|6(?:2\\\\d|38)|7[35]7|9(?:1[89]|63))\\\\d{4}\"],[\"246(?:2(?:[356]\\\\d|4[0-57-9]|8[0-79])|45\\\\d|69[5-7]|8(?:[2-5]\\\\d|83))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:246976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"246(?:292|367|4(?:1[7-9]|3[01]|44|67)|7(?:36|53))\\\\d{4}\"],0,[\"24631\\\\d{5}\"]]],\"BD\":[\"880\",\"00\",\"[13469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-7]\\\\d{8}|[2-9]\\\\d{7}|[3-689]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-7]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:03[56]|224)|4(?:22[25]|653))\\\\d{3,4}|(?:4(?:31\\\\d\\\\d|[46]23)|5(?:222|32[37]))\\\\d{3}(?:\\\\d{2})?|(?:3(?:42[47]|529|823)|4(?:027|525|658)|(?:56|73)2|6257|9[35]1)\\\\d{3}|(?:3(?:02[348]|22[35]|324|422)|4(?:22[67]|32[236-9]|6(?:2[46]|5[57])|953)|5526|6(?:024|6655)|81)\\\\d{4,5}|(?:2(?:7(?:1[0-267]|2[0-289]|3[0-29]|4[01]|5[1-3]|6[013]|7[0178]|91)|8(?:0[125]|1[1-6]|2[0157-9]|3[1-69]|41|6[1-35]|7[1-5]|8[1-8]|9[0-6])|9(?:0[0-2]|1[0-4]|2[568]|3[3-6]|5[5-7]|6[01367]|7[15]|8[014-9]))|3(?:0(?:2[025-79]|3[2-4])|22[12]|32[2356]|824)|4(?:02[09]|22[348]|32[045]|523|6(?:27|54))|666(?:22|53)|8(?:4[12]|[5-7]2)|9(?:[024]2|81))\\\\d{4}|(?:2[45]\\\\d\\\\d|3(?:1(?:2[5-7]|[5-7])|425|822)|4(?:033|1\\\\d|[257]1|332|4(?:2[246]|5[25])|6(?:25|56|62)|8(?:23|54)|92[2-5])|5(?:02[03489]|22[457]|32[569]|42[46]|6(?:[18]|53)|724|826)|6(?:023|2(?:2[2-5]|5[3-5]|8)|32[3478]|42[34]|52[47]|6(?:[18]|6(?:2[34]|5[24]))|[78]2[2-5]|92[2-6])|7(?:02|21\\\\d|[3-589]1|6[12]|72[24])|8(?:0|217|3[12]|[5-7]1)|9[24]1)\\\\d{5}|(?:(?:3[2-8]|5[2-57-9]|6[03-589])1|4[4689][18])\\\\d{5}|[59]1\\\\d{5}\"],[\"(?:1[13-9]\\\\d|644)\\\\d{7}|(?:3[78]|44|66)[02-9]\\\\d{7}\",[10]],[\"80[03]\\\\d{7}\",[10]],0,0,0,0,0,[\"96(?:0[469]|1[0-47]|3[389]|6[69]|7[78])\\\\d{6}\",[10]]]],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"80[2-8]\\\\d{5}|(?:1[0-69]|[23][2-8]|4[23]|5\\\\d|6[013-57-9]|71|8[1-79]|9[2-4])\\\\d{6}\",[8]],[\"4(?:5[56]|6[0135-8]|[79]\\\\d|8[3-9])\\\\d{6}\",[9]],[\"800[1-9]\\\\d{4}\",[8]],[\"(?:70(?:2[0-57]|3[0457]|44|69|7[0579])|90(?:0[0-35-8]|1[36]|2[0-3568]|3[0135689]|4[2-68]|5[1-68]|6[0-378]|7[23568]|9[34679]))\\\\d{4}\",[8]],0,0,[\"78(?:0[57]|1[0458]|2[25]|3[5-8]|48|[56]0|7[078])\\\\d{4}\",[8]],0,0,[\"7879\\\\d{4}\",[8]]]],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:49|5[23]|6[56]|9[016-9])|4(?:4[569]|5[4-6]|6[56]|7[0179])|5(?:[34]\\\\d|50|6[5-7]))\\\\d{4}\"],[\"(?:0[17]|5[124-8]|[67]\\\\d)\\\\d{6}\"]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2\\\\d{5,7}|(?:43[1-6]|70[1-9])\\\\d{4,5}|(?:[36]\\\\d|4[124-7]|[57][1-9]|8[1-6]|9[1-7])\\\\d{5,6}\",[6,7,8]],[\"43[07-9]\\\\d{5}|(?:48|8[7-9]\\\\d|9(?:8\\\\d|9[69]))\\\\d{6}\",[8,9]],[\"800\\\\d{5}\",[8]],[\"90\\\\d{6}\",[8]],[\"700\\\\d{5}\",[8]]]],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]],0,0,0,0,0,0,[[\"(?:1(?:3[1356]|6[0156]|7\\\\d)\\\\d|6(?:1[16]\\\\d|500|6(?:0\\\\d|3[12]|44|7[7-9]|88)|9[69][69])|7(?:1(?:11|78)|7\\\\d\\\\d))\\\\d{4}\"],[\"(?:3(?:[1-4679]\\\\d|5[013-69]|8[0-47-9])\\\\d|6(?:3(?:00|33|6[16])|6(?:3[03-9]|[69]\\\\d|7[0-6])))\\\\d{4}\"],[\"80\\\\d{6}\"],[\"(?:87|9[014578])\\\\d{6}\"],0,0,0,0,0,[\"84\\\\d{6}\"]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]],0,0,0,0,0,0,[[\"22\\\\d{6}\"],[\"(?:29|31|6[189]|7[125-9])\\\\d{6}\"]]],\"BJ\":[\"229\",\"00\",\"[2689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"]]],0,0,0,0,0,0,[[\"2(?:02|1[037]|2[45]|3[68])\\\\d{5}\"],[\"(?:6\\\\d|9[013-9])\\\\d{6}\"],0,0,0,0,[\"81\\\\d{6}\"],0,[\"857[58]\\\\d{4}\"]]],\"BL\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\",[[\"441(?:2(?:02|23|[3479]\\\\d|61)|[46]\\\\d\\\\d|5(?:4\\\\d|60|89)|824)\\\\d{4}\"],[\"441(?:[37]\\\\d|5[0-39])\\\\d{5}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[[\"22[0-7]\\\\d{4}|(?:2[013-9]|[3-5]\\\\d)\\\\d{5}\"],[\"(?:22[89]|[78]\\\\d\\\\d)\\\\d{4}\"]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d{3}|80017)\\\\d{4}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\",0,0,0,[[\"(?:2(?:2\\\\d\\\\d|5(?:11|[258]\\\\d|9[67])|6(?:12|2\\\\d|9[34])|8(?:2[34]|39|62))|3(?:3\\\\d\\\\d|4(?:6\\\\d|8[24])|8(?:25|42|5[257]|86|9[25])|9(?:[27]\\\\d|3[2-4]|4[248]|5[24]|6[2-6]))|4(?:4\\\\d\\\\d|6(?:11|[24689]\\\\d|72)))\\\\d{4}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"80017\\\\d{4}\",[9]]]],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\",[[\"(?:318[023]|41(?:6[023]|70)|7(?:1[578]|50)\\\\d)\\\\d{3}\"],[\"(?:31(?:8[14-8]|9[14578])|416[14-9]|7(?:0[01]|7[07]|8\\\\d|9[056])\\\\d)\\\\d{3}\"]]],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\",0,0,[[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-5]\\\\d{7}\",[10]],[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])(?:7|9\\\\d)\\\\d{7}\",[10,11]],[\"800\\\\d{6,7}\",[9,10]],[\"300\\\\d{6}|[59]00\\\\d{6,7}\",[9,10]],0,0,0,0,0,[\"300\\\\d{7}|[34]00\\\\d{5}|4(?:02|37)0\\\\d{4}\",[8,10]]]],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\",[[\"242(?:3(?:02|[236][1-9]|4[0-24-9]|5[0-68]|7[347]|8[0-4]|9[2-467])|461|502|6(?:0[1-4]|12|2[013]|[45]0|7[67]|8[78]|9[89])|7(?:02|88))\\\\d{4}\"],[\"242(?:3(?:5[79]|7[56]|95)|4(?:[23][1-9]|4[1-35-9]|5[1-8]|6[2-8]|7\\\\d|81)|5(?:2[45]|3[35]|44|5[1-46-9]|65|77)|6[34]6|7(?:27|38)|8(?:0[1-9]|1[02-9]|2\\\\d|[89]9))\\\\d{4}\"],[\"242300\\\\d{4}|8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"242225[0-46-9]\\\\d{3}\"]]],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]],0,0,0,0,0,0,[[\"(?:2[3-6]|[34][5-7]|5[236]|6[2-46]|7[246]|8[2-4])\\\\d{5}\",[7]],[\"(?:1[67]|77)\\\\d{6}\",[8]]]],\"BW\":[\"267\",\"00\",\"90\\\\d{5}|(?:[2-6]|7\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-6]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:2(?:4[0-48]|6[0-24]|9[0578])|3(?:1[0-35-9]|55|[69]\\\\d|7[013])|4(?:6[03]|7[1267]|9[0-5])|5(?:3[0389]|4[0489]|7[1-47]|88|9[0-49])|6(?:2[1-35]|5[149]|8[067]))\\\\d{4}\",[7]],[\"77200\\\\d{3}|7(?:[1-6]\\\\d|7[014-8])\\\\d{5}\",[8]],0,[\"90\\\\d{5}\",[7]],0,0,0,0,[\"79(?:1(?:[01]\\\\d|20)|2[0-2]\\\\d)\\\\d{3}\",[8]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,[[\"(?:1(?:5(?:1[1-5]|[24]\\\\d|6[2-4]|9[1-7])|6(?:[235]\\\\d|4[1-7])|7\\\\d\\\\d)|2(?:1(?:[246]\\\\d|3[0-35-9]|5[1-9])|2(?:[235]\\\\d|4[0-8])|3(?:[26]\\\\d|3[02-79]|4[024-7]|5[03-7])))\\\\d{5}\",[9]],[\"(?:2(?:5[5-79]|9[1-9])|(?:33|44)\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{3,7}|8(?:0[13]|20\\\\d)\\\\d{7}\"],[\"(?:810|902)\\\\d{7}\",[10]],0,0,0,0,[\"249\\\\d{6}\",[9]]],\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]],0,0,0,0,0,0,[[\"(?:236|732)\\\\d{4}|[2-578][02]\\\\d{5}\",[7]],[\"6[0-35-7]\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[017-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"12\\\\d{7}|[1-6]\\\\d{6}\"],[\"88\\\\d{5}|(?:8[0-2459]|9[017-9])\\\\d{7}\"]]],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]],0,0,0,0,0,0,[[\"2[12]\\\\d{6}\"],[\"7[0257]\\\\d{6}\"],0,[\"8776\\\\d{4}\"]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]],0,0,0,0,0,0,[[\"222[1-589]\\\\d{5}\"],[\"0[14-6]\\\\d{7}\"],0,[\"80(?:0\\\\d\\\\d|11[0-4])\\\\d{4}\"]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[12467]|3[1-4]|4[134]|5[256]|6[12]|[7-9]1)\\\\d{7}\"],[\"7[35-9]\\\\d{7}\"],[\"800\\\\d{6}\"],[\"90[016]\\\\d{6}\"],[\"878\\\\d{6}\"],0,[\"5[18]\\\\d{7}\"],[\"74[0248]\\\\d{6}\"],0,[\"84[0248]\\\\d{6}\"]]],\"CI\":[\"225\",\"00\",\"[02-8]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[02-8]\"]]],0,0,0,0,0,0,[[\"(?:2(?:0[023]|1[02357]|[23][045]|4[03-5])|3(?:0[06]|1[069]|[2-4][07]|5[09]|6[08]))\\\\d{5}\"],[\"(?:0[1-9]|[457]\\\\d|6[014-9]|8[4-9])\\\\d{6}\"]]],\"CK\":[\"682\",\"00\",\"[2-8]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-8]\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[13-7]|4[1-5])\\\\d{3}\"],[\"[5-8]\\\\d{4}\"]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"21\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[23]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]],0,0,0,0,0,0,[[\"21962\\\\d{4}|(?:232[0-8]|80[1-9]\\\\d)\\\\d{5}|(?:22|3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|8[1-9]|9[2-9])\\\\d{7}\",[9]],[\"\",[9]],[\"(?:123|8)00\\\\d{6}\",[9,11]],0,0,0,0,0,[\"44\\\\d{7}\",[9]],[\"600\\\\d{7,8}\",[10,11]]]],\"CM\":[\"237\",\"00\",\"(?:[26]\\\\d\\\\d|88)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]]],0,0,0,0,0,0,[[\"2(?:22|33|4[23])\\\\d{6}\",[9]],[\"6[5-9]\\\\d{7}\",[9]],[\"88\\\\d{6}\",[8]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d00\",\"1[1279]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-68]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d)\",0,0,0,[[\"(?:10(?:[02-79]\\\\d\\\\d|[18](?:0[1-9]|[1-9]\\\\d))|21(?:[18](?:0[1-9]|[1-9]\\\\d)|[2-79]\\\\d\\\\d))\\\\d{5}|(?:43[35]|754)\\\\d{7,8}|8(?:078\\\\d{7}|51\\\\d{7,8})|(?:10|(?:2|85)1|43[35]|754)(?:100\\\\d\\\\d|95\\\\d{3,4})|(?:2[02-57-9]|3(?:11|7[179])|4(?:[15]1|3[12])|5(?:1\\\\d|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[57]|6[09])|8(?:71|98))(?:[02-8]\\\\d{7}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{3})?|[1-9]\\\\d{5})|[1-9]\\\\d{6})|9(?:[0-46-9]\\\\d{6}|5\\\\d{3}(?:\\\\d(?:\\\\d{2})?)?))|(?:3(?:1[02-9]|35|49|5\\\\d|7[02-68]|9[1-68])|4(?:1[02-9]|2[179]|3[46-9]|5[2-9]|6[47-9]|7\\\\d|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[17]\\\\d|2[248]|3[04-9]|4[3-6]|5[0-3689]|6[2368]|9[02-9])|8(?:1[236-8]|2[5-7]|3\\\\d|5[2-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:[02-8]\\\\d{6}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{2})?|[1-9]\\\\d{4})|[1-9]\\\\d{5})|9(?:[0-46-9]\\\\d{5}|5\\\\d{3,5}))\",[7,8,9,10,11]],[\"1740[0-5]\\\\d{6}|1(?:[38]\\\\d|4[57]|5[0-35-9]|6[25-7]|7[0-35-8]|9[189])\\\\d{8}\",[11]],[\"(?:(?:10|21)8|8)00\\\\d{7}\",[10,12]],[\"16[08]\\\\d{5}\",[8]],0,0,0,0,0,[\"400\\\\d{7}|950\\\\d{7,8}|(?:10|2[0-57-9]|3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))96\\\\d{3,4}\",[7,8,9,10,11]]],\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:1\\\\d|3)\\\\d{9}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1[2-79]|[25-8]|(?:18|4)[2-9]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1(?:80|9)\",\"1(?:800|9)\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\",0,0,0,[[\"[124-8][2-9]\\\\d{6}\",[8]],[\"3(?:0[0-5]|1\\\\d|2[0-3]|5[01])\\\\d{7}\",[10]],[\"1800\\\\d{7}\",[11]],[\"19(?:0[01]|4[78])\\\\d{7}\",[11]]]],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|[24-8]\\\\d{7}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\",0,0,0,[[\"210[7-9]\\\\d{4}|2(?:[024-7]\\\\d|1[1-9])\\\\d{5}\",[8]],[\"6500[01]\\\\d{3}|5(?:0[01]|7[0-3])\\\\d{5}|(?:6[0-4]|7[0-3]|8[3-9])\\\\d{6}\",[8]],[\"800\\\\d{7}\",[10]],[\"90[059]\\\\d{7}\",[10]],0,0,0,0,[\"(?:210[0-6]|4\\\\d{3}|5100)\\\\d{4}\",[8]]]],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|5\\\\d{7}\",[6,7,8],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[23]|48)\\\\d{4,6}|(?:31|4[36])\\\\d{6}|(?:2[1-4]|4[1257]|7\\\\d)\\\\d{5,6}\"],[\"5\\\\d{7}\",[8]]]],\"CV\":[\"238\",\"0\",\"[2-59]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-59]\"]]],0,0,0,0,0,0,[[\"2(?:2[1-7]|3[0-8]|4[12]|5[1256]|6\\\\d|7[1-3]|8[1-5])\\\\d{4}\"],[\"(?:[34][36]|5[1-389]|9\\\\d)\\\\d{5}\"]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\",[[\"9(?:4(?:3[0-5]|4[14]|6\\\\d)|50\\\\d|7(?:2[014]|3[02-9]|4[4-9]|6[357]|77|8[7-9])|8(?:3[39]|[46]\\\\d|7[01]|8[57-9]))\\\\d{4}\"],[\"953[01]\\\\d{4}|9(?:5[12467]|6[5-9])\\\\d{5}\"],0,0,0,0,0,[\"955\\\\d{5}\",[8]],0,[\"60[0-2]\\\\d{4}\",[7]]]],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[017-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]],0,0,0,0,0,0,[[\"2[2-6]\\\\d{6}\"],[\"9[4-79]\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[09]\\\\d{5}\"],[\"700\\\\d{5}\"],0,[\"(?:50|77)\\\\d{6}\"],0,0,[\"80[1-9]\\\\d{5}\"]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[1257-9]|4[16-9]|5[13-9])\\\\d{7}\"],[\"(?:60[1-8]|7(?:0[2-5]|[2379]\\\\d))\\\\d{6}\"],[\"800\\\\d{6}\"],[\"9(?:0[05689]|76)\\\\d{6}\"],[\"70[01]\\\\d{6}\"],0,[\"9(?:5\\\\d|7[2-4])\\\\d{6}\"],0,[\"9[17]0\\\\d{6}\"],[\"8[134]\\\\d{7}\"]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[05]\\\\d{10}|[46][1-8]\\\\d{4,9})|49(?:[0-25]\\\\d|3[1-689]|7[1-7])\\\\d{4,8}|49(?:[0-2579]\\\\d|[34][1-9]|6[0-8])\\\\d{3}|49\\\\d{3,4}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:32|49[4-6]\\\\d)\\\\d{9}|49[0-7]\\\\d{3,9}|(?:[34]0|[68]9)\\\\d{3,13}|(?:2(?:0[1-689]|[1-3569]\\\\d|4[0-8]|7[1-7]|8[0-7])|3(?:[3569]\\\\d|4[0-79]|7[1-7]|8[1-8])|4(?:1[02-9]|[2-48]\\\\d|5[0-6]|6[0-8]|7[0-79])|5(?:0[2-8]|[124-6]\\\\d|[38][0-8]|[79][0-7])|6(?:0[02-9]|[1-358]\\\\d|[47][0-8]|6[1-9])|7(?:0[2-8]|1[1-9]|[27][0-7]|3\\\\d|[4-6][0-8]|8[0-5]|9[013-7])|8(?:0[2-9]|1[0-79]|2\\\\d|3[0-46-9]|4[0-6]|5[013-9]|6[1-8]|7[0-8]|8[0-24-6])|9(?:0[6-9]|[1-4]\\\\d|[589][0-7]|6[0-8]|7[0-467]))\\\\d{3,12}\",[5,6,7,8,9,10,11,12,13,14,15]],[\"15[0-25-9]\\\\d{8}|1(?:6[023]|7\\\\d)\\\\d{7,8}\",[10,11]],[\"800\\\\d{7,12}\",[10,11,12,13,14,15]],[\"(?:137[7-9]|900(?:[135]|9\\\\d))\\\\d{6}\",[10,11]],[\"700\\\\d{8}\",[11]],0,[\"18(?:1\\\\d{5,11}|[2-9]\\\\d{8})\",[8,9,10,11,12,13,14]],[\"16(?:4\\\\d{1,10}|[89]\\\\d{1,11})\",[4,5,6,7,8,9,10,11,12,13,14]],0,[\"180\\\\d{5,11}|13(?:7[1-6]\\\\d\\\\d|8)\\\\d{4}\",[7,8,9,10,11,12,13,14]]]],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]],0,0,0,0,0,0,[[\"2(?:1[2-5]|7[45])\\\\d{5}\"],[\"77\\\\d{6}\"]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:[2-7]\\\\d|8[126-9]|9[1-36-9])\\\\d{6}\"],[\"\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\",[[\"767(?:2(?:55|66)|4(?:2[01]|4[0-25-9])|50[0-4]|70[1-3])\\\\d{4}\"],[\"767(?:2(?:[2-4689]5|7[5-7])|31[5-7]|61[1-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8[024]9\",[[\"8(?:[04]9[2-9]\\\\d\\\\d|29(?:2(?:[0-59]\\\\d|6[04-9]|7[0-27]|8[0237-9])|3(?:[0-35-9]\\\\d|4[7-9])|[45]\\\\d\\\\d|6(?:[0-27-9]\\\\d|[3-5][1-9]|6[0135-8])|7(?:0[013-9]|[1-37]\\\\d|4[1-35689]|5[1-4689]|6[1-57-9]|8[1-79]|9[1-8])|8(?:0[146-9]|1[0-48]|[248]\\\\d|3[1-79]|5[01589]|6[013-68]|7[124-8]|9[0-8])|9(?:[0-24]\\\\d|3[02-46-9]|5[0-79]|60|7[0169]|8[57-9]|9[02-9])))\\\\d{4}\"],[\"8[024]9[2-9]\\\\d{6}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"9619\\\\d{5}|(?:1\\\\d|2[013-79]|3[0-8]|4[0135689])\\\\d{6}\"],[\"67[0-6]\\\\d{6}|(?:5[4-6]|6[569]|7[7-9])\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"80[3-689]1\\\\d{5}\",[9]],0,0,0,0,[\"98[23]\\\\d{6}\",[9]],[\"80[12]1\\\\d{5}\",[9]]]],\"EC\":[\"593\",\"00\",\"1800\\\\d{6,7}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"[2-7][2-7]\\\\d{6}\",[8]],[\"964[0-2]\\\\d{5}|9(?:39|[57][89]|6[0-37-9]|[89]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{6,7}\",[10,11]],0,0,0,0,0,[\"[2-7]890\\\\d{4}\",[8]]]],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d\\\\d|900)\\\\d{4}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-4])\",\"[45]|8(?:00[1-9]|[1-4])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"80\"]]],0,0,0,0,0,0,[[\"(?:3[23589]|4[3-8]|6\\\\d|7[1-9]|88)\\\\d{5}\",[7]],[\"(?:5\\\\d|8[1-4])\\\\d{6}|5(?:(?:[02]\\\\d|5[0-478])\\\\d|1(?:[0-8]\\\\d|95)|6(?:4[0-4]|5[1-589]))\\\\d{3}\",[7,8]],[\"800(?:(?:0\\\\d\\\\d|1)\\\\d|[2-9])\\\\d{3}\"],[\"(?:40\\\\d\\\\d|900)\\\\d{4}\",[7,8]],[\"70[0-2]\\\\d{5}\",[8]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:15\\\\d|57[23])\\\\d{5,6}|(?:13[23]|(?:2[2-4]|3)\\\\d|4(?:0[2-5]|[578][23]|64)|5(?:0[2-7]|5\\\\d)|6[24-689]3|8(?:2[2-57]|4[26]|6[237]|8[2-4])|9(?:2[27]|3[24]|52|6[2356]|7[2-4]))\\\\d{6}\",[8,9]],[\"1[0-25]\\\\d{8}\",[10]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]]]],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\",[[\"528[89]\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[06-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"5924[01]\\\\d{4}\"]]],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1[12568]|[24]0|55|6[146])|8\\\\d\\\\d)\\\\d{4}\"],[\"(?:17[1-3]|7\\\\d\\\\d)\\\\d{4}\"]]],\"ES\":[\"34\",\"00\",\"(?:51|[6-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]],0,0,0,0,0,0,[[\"96906(?:0[0-8]|1[1-9]|[2-9]\\\\d)\\\\d\\\\d|9(?:69(?:0[0-57-9]|[1-9]\\\\d)|73(?:[0-8]\\\\d|9[1-9]))\\\\d{4}|(?:8(?:[1356]\\\\d|[28][0-8]|[47][1-9])|9(?:[135]\\\\d|[268][0-8]|4[1-9]|7[124-9]))\\\\d{6}\"],[\"9(?:6906(?:09|10)|7390\\\\d\\\\d)\\\\d\\\\d|(?:6\\\\d|7[1-48])\\\\d{7}\"],[\"[89]00\\\\d{6}\"],[\"80[367]\\\\d{6}\"],[\"70\\\\d{7}\"],0,[\"51\\\\d{7}\"],0,0,[\"90[12]\\\\d{6}\"]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:11(?:1(?:1[124]|2[2-57]|3[1-5]|5[5-8]|8[6-8])|2(?:13|3[6-8]|5[89]|7[05-9]|8[2-6])|3(?:2[01]|3[0-289]|4[1289]|7[1-4]|87)|4(?:1[69]|3[2-49]|4[0-3]|6[5-8])|5(?:1[578]|44|5[0-4])|6(?:1[78]|2[69]|39|4[5-7]|5[1-5]|6[0-59]|8[015-8]))|2(?:2(?:11[1-9]|22[0-7]|33\\\\d|44[1467]|66[1-68])|5(?:11[124-6]|33[2-8]|44[1467]|55[14]|66[1-3679]|77[124-79]|880))|3(?:3(?:11[0-46-8]|(?:22|55)[0-6]|33[0134689]|44[04]|66[01467])|4(?:44[0-8]|55[0-69]|66[0-3]|77[1-5]))|4(?:6(?:22[0-24-7]|33[1-5]|44[13-69]|55[14-689]|660|88[1-4])|7(?:(?:11|22)[1-9]|33[13-7]|44[13-6]|55[1-689]))|5(?:7(?:227|55[05]|(?:66|77)[14-8])|8(?:11[149]|22[013-79]|33[0-68]|44[013-8]|550|66[1-5]|77\\\\d)))\\\\d{4}\"],[\"9\\\\d{8}\"]]],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}|[1-35689]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[12]0|7)0|[368]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[12457]\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",[[\"(?:1[3-79][1-8]|[235689][1-8]\\\\d)\\\\d{2,6}\",[5,6,7,8,9]],[\"(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"(?:10|[23][09])\\\\d{4,8}|60(?:[12]\\\\d{5,6}|6\\\\d{7})|7(?:(?:1|3\\\\d)\\\\d{7}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d\"]],\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,[[\"603\\\\d{4}|(?:3[0-5]|6[25-7]|8[58])\\\\d{5}\",[7]],[\"(?:[279]\\\\d|45|5[01568]|8[034679])\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]],\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5],0,0,0,0,0,0,0,[[\"[2-47]\\\\d{4}\"],[\"[56]\\\\d{4}\"]]],\"FM\":[\"691\",\"00\",\"[39]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[39]\"]]],0,0,0,0,0,0,[[\"(?:3[2357]0[1-9]|9[2-6]\\\\d\\\\d)\\\\d{3}\"],[\"(?:3[2357]0[1-9]|9[2-7]\\\\d\\\\d)\\\\d{3}\"]]],\"FO\":[\"298\",\"00\",\"(?:[2-8]\\\\d|90)\\\\d{4}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\",0,0,0,[[\"(?:20|[34]\\\\d|8[19])\\\\d{4}\"],[\"(?:[27][1-9]|5\\\\d)\\\\d{4}\"],[\"80[257-9]\\\\d{3}\"],[\"90(?:[13-5][15-7]|2[125-7]|99)\\\\d\\\\d\"],0,0,0,0,[\"(?:6[0-36]|88)\\\\d{4}\"]]],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[1-5]\\\\d{8}\"],[\"700\\\\d{6}|(?:6\\\\d|7[3-9])\\\\d{7}\"],[\"80[0-5]\\\\d{6}\"],[\"8[129]\\\\d{7}\"],0,0,[\"80[6-9]\\\\d{6}\"],0,[\"9\\\\d{8}\"],[\"884\\\\d{6}\"]]],\"GA\":[\"241\",\"00\",\"(?:0\\\\d|[2-7])\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,0,0,0,0,[[\"01\\\\d{6}\",[8]],[\"(?:0[2-7]|[2-7])\\\\d{6}\"]]],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[024-9])\",\"[25]|7(?:0|6(?:[04-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3[0-58]|4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])|2(?:0[024-9]|1[0-7]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)|3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))|2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d)\\\\d{6}|1(?:(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d|7(?:(?:26(?:6[13-9]|7[0-7])|442\\\\d|50(?:2[0-3]|[3-68]2|76))\\\\d|6888[2-46-8]))\\\\d\\\\d\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\",[[\"473(?:2(?:3[0-2]|69)|3(?:2[89]|86)|4(?:[06]8|3[5-9]|4[0-49]|5[5-79]|73|90)|63[68]|7(?:58|84)|800|938)\\\\d{4}\"],[\"473(?:4(?:0[2-79]|1[04-9]|2[0-5]|58)|5(?:2[01]|3[3-8])|901)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[256]\\\\d|4[124-9]|7[0-4])|4(?:1\\\\d|2[2-7]|3[1-79]|4[2-8]|7[239]|9[1-7]))\\\\d{6}\"],[\"(?:5(?:[14]4|5[0157-9]|68|7[0147-9]|9[1-35-9])|790)\\\\d{6}\"],[\"800\\\\d{6}\"],0,0,0,0,0,[\"706\\\\d{6}\"]]],\"GF\":[\"594\",\"00\",\"[56]94\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"594(?:[023]\\\\d|1[01]|4[03-9]|5[6-9]|6[0-3]|80|9[014])\\\\d{4}\"],[\"694(?:[0-249]\\\\d|3[0-48])\\\\d{4}\"]]],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"3(?:[167]2[0-6]|22[0-5]|32[0-3]|4(?:2[013-9]|3[01])|52[0-7]|82[0-2])\\\\d{5}|3(?:[0-8]8|9[28])0\\\\d{5}|3(?:0[237]|[1-9]7)\\\\d{6}\",[9]],[\"56[01]\\\\d{6}|(?:2[0346-8]|5[0457])\\\\d{7}\",[9]],[\"800\\\\d{5}\",[8]]]],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|629)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]],0,0,0,0,0,0,[[\"2190[0-2]\\\\d{3}|2(?:00\\\\d|16[24-7]|2(?:2[2457]|50))\\\\d{4}\"],[\"(?:5[46-8]\\\\d|629)\\\\d{5}\"]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-689]\"]]],0,0,0,0,0,0,[[\"(?:19|3[1-7]|6[14689]|8[14-79]|9\\\\d)\\\\d{4}\"],[\"(?:[25][1-9]|4[2-9])\\\\d{4}\"],[\"80\\\\d{4}\"],0,0,0,0,0,[\"3[89]\\\\d{4}\"]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:4(?:[23]\\\\d\\\\d|4(?:1[024679]|[6-9]\\\\d))|5(?:54[0-7]|6[67]\\\\d|7(?:1[04]|2[035]|3[58]|48))|8\\\\d{3})\\\\d{3}\"],[\"(?:[23679]\\\\d|5[01])\\\\d{5}\"]]],\"GN\":[\"224\",\"00\",\"(?:30|6\\\\d\\\\d|722)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]],0,0,0,0,0,0,[[\"30(?:24|3[12]|4[1-35-7]|5[13]|6[189]|[78]1|9[1478])\\\\d{4}\",[8]],[\"6[02356]\\\\d{7}\",[9]],0,0,0,0,0,0,[\"722\\\\d{6}\",[9]]]],\"GP\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]],0,0,0,0,0,0,[[\"33[0-24-9]\\\\d[46]\\\\d{4}|3(?:33|5\\\\d)\\\\d[7-9]\\\\d{4}\"],[\"(?:222|55[015])\\\\d{6}\"],[\"80\\\\d[1-9]\\\\d{5}\"],[\"90\\\\d[1-9]\\\\d{5}\"]]],\"GR\":[\"30\",\"00\",\"(?:[268]\\\\d|[79]0)\\\\d{8}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]]],0,0,0,0,0,0,[[\"2(?:1\\\\d\\\\d|2(?:2[1-46-9]|[36][1-8]|4[1-7]|5[1-4]|7[1-5]|[89][1-9])|3(?:1\\\\d|2[1-57]|[35][1-3]|4[13]|7[1-7]|8[124-6]|9[1-79])|4(?:1\\\\d|2[1-8]|3[1-4]|4[13-5]|6[1-578]|9[1-5])|5(?:1\\\\d|[29][1-4]|3[1-5]|4[124]|5[1-6])|6(?:1\\\\d|[269][1-6]|3[1245]|4[1-7]|5[13-9]|7[14]|8[1-5])|7(?:1\\\\d|2[1-5]|3[1-6]|4[1-7]|5[1-57]|6[135]|9[125-7])|8(?:1\\\\d|2[1-5]|[34][1-4]|9[1-57]))\\\\d{6}\"],[\"6(?:8[57-9]|9\\\\d)\\\\d{7}\"],[\"800\\\\d{7}\"],[\"90[19]\\\\d{7}\"],[\"70\\\\d{8}\"],0,0,0,0,[\"8(?:0[16]|12|25)\\\\d{7}\"]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"[267][2-9]\\\\d{6}\",[8]],[\"[3-5]\\\\d{7}\",[8]],[\"18[01]\\\\d{8}\",[11]],[\"19\\\\d{9}\",[11]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\",[[\"671(?:3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[0236-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]],0,0,0,0,0,0,[[\"443\\\\d{6}\",[9]],[\"9(?:5\\\\d|6[569]|77)\\\\d{6}\",[9]],0,0,0,0,0,0,[\"40\\\\d{5}\",[7]]]],\"GY\":[\"592\",\"001\",\"(?:862\\\\d|9008)\\\\d{3}|(?:[2-46]\\\\d|77)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:1[6-9]|2[0-35-9]|3[1-4]|5[3-9]|6\\\\d|7[0-24-79])|3(?:2[25-9]|3\\\\d)|4(?:4[0-24]|5[56])|77[1-57])\\\\d{4}\"],[\"6\\\\d{6}\"],[\"(?:289|862)\\\\d{4}\"],[\"9008\\\\d{3}\"]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4}(?:\\\\d(?:\\\\d(?:\\\\d{4})?)?)?|(?:[235-79]\\\\d|46)\\\\d{6}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:384[0-24]|58(?:0[1-8]|1[2-9]))\\\\d{4}|(?:2(?:[13-8]\\\\d|2[013-9]|9[0-24-9])|3(?:[1569][0-24-9]|4[0-246-9]|7[0-24-69]|89))\\\\d{5}\",[8]],[\"(?:46(?:0[0-6]|1[0-2]|4[0-57-9])|5730|(?:626|848)[01]|707[1-5]|929[03-9])\\\\d{4}|(?:5(?:[1-59][0-46-9]|6[0-4689]|7[0-2469])|6(?:0[1-9]|[13-59]\\\\d|[268][0-57-9]|7[0-79])|9(?:0[1-9]|1[02-9]|[2358][0-8]|[467]\\\\d))\\\\d{5}\",[8]],[\"800\\\\d{6}\",[9]],[\"900(?:[0-24-9]\\\\d{7}|3\\\\d{1,4})\",[5,6,7,8,11]],[\"8(?:1[0-4679]\\\\d|2(?:[0-36]\\\\d|7[0-4])|3(?:[034]\\\\d|2[09]|70))\\\\d{4}\",[8]],0,[\"30(?:0[1-9]|[15-7]\\\\d|2[047]|89)\\\\d{4}\",[8]],[\"7(?:1(?:0[0-38]|1[0-3679]|3[013]|69|9[136])|2(?:[02389]\\\\d|1[18]|7[27-9])|3(?:[0-38]\\\\d|7[0-369]|9[2357-9])|47\\\\d|5(?:[178]\\\\d|5[0-5])|6(?:0[0-7]|2[236-9]|[35]\\\\d)|7(?:[27]\\\\d|8[7-9])|8(?:[23689]\\\\d|7[1-9])|9(?:[025]\\\\d|6[0-246-8]|7[0-36-9]|8[238]))\\\\d{4}\",[8]]],\"00\"],\"HN\":[\"504\",\"00\",\"[237-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]],0,0,0,0,0,0,[[\"2(?:2(?:0[019]|1[1-36]|[23]\\\\d|4[04-6]|5[57]|6[24]|7[0135689]|8[01346-9]|9[0-2])|4(?:07|2[3-59]|3[13-689]|4[0-68]|5[1-35])|5(?:08|16|4[03-5]|5\\\\d|6[4-6]|74|80)|6(?:[056]\\\\d|17|20|3[04]|4[0-378]|[78][0-8]|9[01])|7(?:6[46-9]|7[02-9]|8[034])|8(?:79|8[0-357-9]|9[1-57-9]))\\\\d{4}\"],[\"[37-9]\\\\d{7}\"]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[0-3]|3[1-5]|4[02-47-9]|5[1-3])\\\\d{6,7}\",[8,9]],[\"9(?:751\\\\d{5}|8\\\\d{6,7})|9(?:01|[1259]\\\\d|7[0679])\\\\d{6}\",[8,9]],[\"80[01]\\\\d{4,6}\",[7,8,9]],[\"6[01459]\\\\d{6}|6[01]\\\\d{4,5}\",[6,7,8]],[\"7[45]\\\\d{6}\",[8]],0,[\"62\\\\d{6,7}|72\\\\d{6}\",[8,9]]]],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]],0,0,0,0,0,0,[[\"2(?:2\\\\d|5[1-5]|81|9[149])\\\\d{5}\"],[\"[34]\\\\d{7}\"],[\"8\\\\d{7}\"],0,0,0,0,0,[\"9(?:[67][0-4]|8[0-3589]|9\\\\d)\\\\d{5}\"]]],\"HU\":[\"36\",\"00\",\"[2357]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"($1)\"]],\"06\",0,0,0,0,0,[[\"(?:1\\\\d|[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6[23689]|8[2-57-9]|9[2-69])\\\\d{6}\",[8]],[\"(?:[257]0|3[01])\\\\d{7}\",[9]],[\"[48]0\\\\d{6}\",[8]],[\"9[01]\\\\d{6}\",[8]],0,0,[\"38\\\\d{7}\",[9]],0,[\"21\\\\d{7}\",[9]]]],\"ID\":[\"62\",\"00[189]\",\"(?:(?:007803|8\\\\d{4})\\\\d|[1-36])\\\\d{6}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[124]\\\\d{7,8}|619\\\\d{8}|2(?:1(?:14|500)|2\\\\d{3})\\\\d{3}|61\\\\d{5,8}|(?:2(?:[35][1-4]|6[0-8]|7[1-6]|8\\\\d|9[1-8])|3(?:1|[25][1-8]|3[1-68]|4[1-3]|6[1-3568]|7[0-469]|8\\\\d)|4(?:0[1-589]|1[01347-9]|2[0-36-8]|3[0-24-68]|43|5[1-378]|6[1-5]|7[134]|8[1245])|5(?:1[1-35-9]|2[25-8]|3[124-9]|4[1-3589]|5[1-46]|6[1-8])|6(?:[25]\\\\d|3[1-69]|4[1-6])|7(?:02|[125][1-9]|[36]\\\\d|4[1-8]|7[0-36-9])|9(?:0[12]|1[013-8]|2[0-479]|5[125-8]|6[23679]|7[159]|8[01346]))\\\\d{5,8}\",[7,8,9,10,11]],[\"8[1-35-9]\\\\d{7,10}\",[9,10,11,12]],[\"007803\\\\d{7}|(?:177\\\\d|800)\\\\d{5,7}\",[8,9,10,11,13]],[\"809\\\\d{7}\",[10]],0,0,[\"(?:1500|8071\\\\d{3})\\\\d{3}\",[7,10]],0,0,[\"804\\\\d{7}\",[10]]]],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|21)\\\\d{6,7}|(?:2[24-9]|4(?:0[24]|5\\\\d|7)|5(?:0[45]|1\\\\d|8)|6(?:1\\\\d|[237-9])|9(?:1\\\\d|[35-9]))\\\\d{5}|(?:23|4(?:[1-469]|8[0-46-9])|5[23679]|6[4-6]|7[14]|9[04])\\\\d{7}\"],[\"8(?:22|[35-9]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{6}\",[10]],[\"15(?:1[2-8]|[2-8]0|9[089])\\\\d{6}\",[10]],[\"700\\\\d{6}\",[9]],0,[\"818\\\\d{6}\",[9]],0,[\"76\\\\d{7}\",[9]],[\"18[59]0\\\\d{6}\",[10]]]],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\",0,0,0,0,0,[[\"153\\\\d{8,9}|[2-489]\\\\d{7}\",[8,11,12]],[\"5(?:(?:[0-489][2-9]|6\\\\d)\\\\d|5(?:01|2[2-5]|3[23]|4[45]|5[05689]|6[6-8]|7[0-267]|8[7-9]|9[1-9]))\\\\d{5}\",[9]],[\"1(?:255|80[019]\\\\d{3})\\\\d{3}\",[7,10]],[\"1212\\\\d{4}|1(?:200|9(?:0[01]|19))\\\\d{6}\",[8,10]],0,0,[\"1599\\\\d{6}\",[10]],0,[\"78(?:33|55|77|81)\\\\d{5}|7(?:18|2[23]|3[237]|47|6[58]|7\\\\d|82|9[2357-9])\\\\d{6}\",[9]],[\"1700\\\\d{6}\",[10]]]],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([5-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\",[[\"1624[5-8]\\\\d{5}\"],[\"76245[06]\\\\d{4}|7(?:4576|[59]24\\\\d|624[0-4689])\\\\d{5}\"],[\"808162\\\\d{4}\"],[\"8(?:440[49]06|72299\\\\d)\\\\d{3}|(?:8(?:45|70)|90[0167])624\\\\d{4}\"],[\"70\\\\d{8}\"],0,[\"3440[49]06\\\\d{3}|(?:3(?:08162|3\\\\d{4}|45624|7(?:0624|2299))|55\\\\d{4})\\\\d{4}\"],0,[\"56\\\\d{8}\"]]],\"IN\":[\"91\",\"00\",\"(?:00800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|(?:55|61)2|7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:1(?:29|60|8[06])|261|552|788[01])[2-7]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|[4-8])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|3179)|807(?:1|9[1-3])|(?:1552|7(?:28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\",0,0,0,0,0,[[\"782[0-6][2-7]\\\\d{5}|(?:170[24]|2(?:80[13468]|90\\\\d)|380\\\\d|4(?:20[24]|72[2-8])|552[1-7])\\\\d{6}|(?:342|674|788)(?:[0189][2-7]|[2-7]\\\\d)\\\\d{5}|(?:11|2[02]|33|4[04]|79|80)[2-7]\\\\d{7}|(?:1(?:2[0-249]|3[0-25]|4[145]|[59][14]|6[014]|7[1257]|8[01346])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[13]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[014-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|[67]1)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91))[2-7]\\\\d{6}|(?:1(?:2[35-8]|3[346-9]|4[236-9]|[59][0235-9]|6[235-9]|7[34689]|8[257-9])|2(?:1[134689]|3[24-8]|4[2-8]|5[25689]|6[2-4679]|7[13-79]|8[2-479]|9[235-9])|3(?:01|1[79]|2[1-5]|4[5-8]|5[125689]|6[235-7]|7[157-9]|8[2-46-8])|4(?:1[14578]|2[5689]|3[2-467]|5[4-7]|6[35]|73|8[2689]|9[2389])|5(?:[16][146-9]|2[14-8]|3[1346]|4[14-69]|5[46]|7[2-4]|8[2-8]|9[246])|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|2[0235-9]|3[2679]|4[1-35689]|5[2-46-9]|[67][02-9]|8[013-7]|9[0189])|8(?:1[1357-9]|2[235-8]|3[03-57-9]|4[0-24-9]|5\\\\d|6[2457-9]|7[1-6]|8[1256]|9[2-4]))\\\\d[2-7]\\\\d{5}\",[10]],[\"(?:6(?:1279|350[0-6])|7(?:3(?:1(?:11|7[02-8])|411)|4[47](?:11|7[02-8])|5111|700[02-9]|88(?:11|7[02-9])|9(?:313|79[07-9]))|8(?:079[04-9]|(?:16|2[014]|3[126]|6[136]|7[78]|8[34]|91)7[02-8]))\\\\d{5}|7(?:28[6-8]|3(?:2[0-49]|9[2-5])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7])[089]\\\\d{5}|(?:6(?:0(?:0[0-3569]|26|33)|2(?:[06]\\\\d|3[02589]|8[0-479]|9[0-79])|3(?:0[0-79]|5[1-9]|6[0-4679]|7[0-24-9]|[89]\\\\d)|9(?:0[019]|13))|7(?:0\\\\d\\\\d|19[0-5]|2(?:[0235-79]\\\\d|[14][017-9]|8[0-59])|3(?:[05-8]\\\\d|1[089]|2[5-8]|3[017-9]|4[07-9]|9[016-9])|4(?:0\\\\d|1[015-9]|[29][89]|39|[47][089]|8[389])|5(?:[0346-8]\\\\d|1[07-9]|2[04-9]|5[017-9]|9[7-9])|6(?:0[0-47]|1[0-257-9]|2[0-4]|3[19]|5[4589]|[6-9]\\\\d)|7(?:0[289]|[1-9]\\\\d)|8(?:[0-79]\\\\d|8[089])|9(?:[089]\\\\d|7[02-8]))|8(?:0(?:[01589]\\\\d|6[67]|7[02-8])|1(?:[0-57-9]\\\\d|6[089])|2(?:[014][089]|[235-9]\\\\d)|3(?:[03-57-9]\\\\d|[126][089])|[45]\\\\d\\\\d|6(?:[02457-9]\\\\d|[136][089])|7(?:0[07-9]|[1-69]\\\\d|[78][089])|8(?:[0-25-9]\\\\d|3[089]|4[0489])|9(?:[02-9]\\\\d|1[0289]))|9\\\\d{3})\\\\d{6}\",[10]],[\"00800\\\\d{7}|1(?:600\\\\d{6}|80(?:0\\\\d{4,9}|3\\\\d{9}))\"],[\"186[12]\\\\d{9}\",[13]],0,0,[\"140\\\\d{7}\",[10]],0,0,[\"1860\\\\d{7}\",[11]]]],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]],0,0,0,0,0,0,[[\"37\\\\d{5}\"],[\"38\\\\d{5}\"]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[13-5]|3[02367]|4[023]|5[03]|6[026])\\\\d{6,7}\",[8,9]],[\"7[3-9]\\\\d{8}\",[10]]]],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"944111\\\\d{4}|94(?:(?:00|44)0|(?:11|2\\\\d)\\\\d|30[01])\\\\d{5}|(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])(?:[03-57]\\\\d{7}|[16]\\\\d{3}(?:\\\\d{4})?|[289]\\\\d{3}(?:\\\\d(?:\\\\d{3})?)?)\",[6,7,10]],[\"9(?:(?:0(?:[1-35]\\\\d|44)|(?:[13]\\\\d|2[0-2])\\\\d)\\\\d|9(?:(?:[0-2]\\\\d|44)\\\\d|510|8(?:1\\\\d|88)|9(?:0[013]|1[0134]|21|77|9[6-9])))\\\\d{5}\",[10]],0,0,0,0,[\"96(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19])\",[4,5]],0,[\"993\\\\d{7}\",[10]]]],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"(?:4(?:1[0-24-69]|2[0-7]|[37][0-8]|4[0-245]|5[0-68]|6\\\\d|8[0-36-8])|5(?:05|[156]\\\\d|2[02578]|3[0-579]|4[03-7]|7[0-2578]|8[0-35-9]|9[013-689])|87[23])\\\\d{4}\",[7]],[\"(?:38[589]\\\\d\\\\d|6(?:1[1-8]|2[0-6]|3[027-9]|4[014679]|5[0159]|6[0-69]|70|8[06-8]|9\\\\d)|7(?:5[057]|[6-8]\\\\d|9[0-3])|8(?:2[0-59]|[3469]\\\\d|5[1-9]|8[28]))\\\\d{4}\"],[\"800\\\\d{4}\",[7]],[\"90\\\\d{5}\",[7]],0,0,[\"809\\\\d{4}\",[7]],0,[\"49\\\\d{5}\",[7]]],\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{6,10}|55\\\\d{8}|[08]\\\\d{5}|(?:3[0-8]|8)\\\\d{7,9}|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1[4679]|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"33\\\\d{9}|3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10,11]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\",[[\"(?:658(?:2(?:[0-8]\\\\d|9[0-46-9])|[3-9]\\\\d\\\\d)|876(?:5(?:02|1[0-468]|2[35]|63)|6(?:0[1-3579]|1[0237-9]|[23]\\\\d|40|5[06]|6[2-589]|7[05]|8[04]|9[4-9])|7(?:0[2-689]|[1-6]\\\\d|8[056]|9[45])|9(?:0[1-8]|1[02378]|[2-8]\\\\d|9[2-468])))\\\\d{4}\"],[\"(?:658295|876(?:(?:2[14-9]|[348]\\\\d)\\\\d|5(?:0[13-9]|17|[2-57-9]\\\\d|6[0-24-9])|7(?:0[07]|7\\\\d|8[1-47-9]|9[0-36-9])|9(?:[01]9|9[0579])))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"JO\":[\"962\",\"00\",\"900\\\\d{5}|(?:(?:[268]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:6(?:2[0-35-9]|3[0-578]|4[24-7]|5[0-24-8]|[6-8][023]|9[0-3])|7(?:0[1-79]|10|2[014-7]|3[0-689]|4[019]|5[0-3578]))|32(?:0[1-69]|1[1-35-7]|2[024-7]|3\\\\d|4[0-3]|[57][023]|6[03])|53(?:0[0-3]|[13][023]|2[0-59]|49|5[0-35-9]|6[15]|7[45]|8[1-6]|9[0-36-9])|6(?:2(?:[05]0|22)|3(?:00|33)|4(?:0[0-25]|1[2-7]|2[0569]|[38][07-9]|4[025689]|6[0-589]|7\\\\d|9[0-2])|5(?:[01][056]|2[034]|3[0-57-9]|4[178]|5[0-69]|6[0-35-9]|7[1-379]|8[0-68]|9[0239]))|87(?:[029]0|7[08]))\\\\d{4}\",[8]],[\"7(?:55[0-49]|(?:7[025-9]|[89][0-25-9])\\\\d)\\\\d{5}\",[9]],[\"80\\\\d{6}\",[8]],[\"900\\\\d{5}\",[8]],[\"70\\\\d{7}\",[9]],0,[\"8(?:10|8\\\\d)\\\\d{5}\",[8]],[\"74(?:66|77)\\\\d{5}\",[9]],0,[\"85\\\\d{6}\",[8]]]],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|6(?:[0-24]|5[0-3589]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])\",\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[2579]|80\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1[235-8]|2[3-6]|3[3-9]|4[2-6]|[58][2-8]|6[2-7]|7[2-9]|9[1-9])|(?:2[2-9]|[36][1-9])\\\\d|4(?:[2-578]\\\\d|6[02-8]|9[2-59])|5(?:[2-589]\\\\d|6[1-9]|7[2-8])|7(?:[25-9]\\\\d|3[4-9]|4[02-9])|8(?:[2679]\\\\d|3[2-9]|4[5-9]|5[1-9]|8[03-9])|9(?:[2-58]\\\\d|[679][1-9]))\\\\d{6}\",[9]],[\"[7-9]0[1-9]\\\\d{7}\",[10]],[\"00(?:(?:37|66)\\\\d{6,13}|(?:777(?:[01]|(?:5|8\\\\d)\\\\d)|882[1245]\\\\d\\\\d)\\\\d\\\\d)|(?:120|800\\\\d)\\\\d{6}\"],[\"990\\\\d{6}\",[9]],[\"60\\\\d{7}\",[9]],0,[\"570\\\\d{6}\",[9]],[\"20\\\\d{8}\",[10]],[\"50[1-9]\\\\d{7}\",[10]]]],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[245]|5[2-79]|6[01457-9])\\\\d{5,7}|(?:4[136]|5[08]|62)\\\\d{7}|(?:[24]0|51|66)\\\\d{6,7}\",[7,8,9]],[\"(?:1(?:0[0-2]|1[01])|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"800[24-8]\\\\d{5,6}\",[9,10]],[\"900[02-9]\\\\d{5}\",[9]]]],\"KG\":[\"996\",\"00\",\"(?:[235-7]\\\\d|99)\\\\d{7}|800\\\\d{6,7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:1(?:[256]\\\\d|3[1-9]|47)|2(?:22|3[0-479]|6[0-7])|4(?:22|5[6-9]|6\\\\d)|5(?:22|3[4-7]|59|6\\\\d)|6(?:22|5[35-7]|6\\\\d)|7(?:22|3[468]|4[1-9]|59|[67]\\\\d)|9(?:22|4[1-8]|6\\\\d))|6(?:09|12|2[2-4])\\\\d)\\\\d{5}\",[9]],[\"(?:2(?:0[0-35]|2\\\\d)|5(?:0[0-57-9]|[124-7]\\\\d)|7(?:[07]\\\\d|55)|99[69])\\\\d{6}\",[9]],[\"800\\\\d{6,7}\"]]],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"23(?:4(?:[2-4]|[56]\\\\d)|[568]\\\\d\\\\d)\\\\d{4}|23[236-9]\\\\d{5}|(?:2[4-6]|3[2-6]|4[2-4]|[5-7][2-5])(?:(?:[237-9]|4[56]|5\\\\d)\\\\d{5}|6\\\\d{5,6})\",[8,9]],[\"(?:(?:1[28]|3[18]|9[67])\\\\d|6[016-9]|7(?:[07-9]|[16]\\\\d)|8(?:[013-79]|8\\\\d))\\\\d{6}|(?:1\\\\d|9[0-57-9])\\\\d{6}|(?:2[3-6]|3[2-6]|4[2-4]|[5-7][2-5])48\\\\d{5}\",[8,9]],[\"1800(?:1\\\\d|2[019])\\\\d{4}\",[10]],[\"1900(?:1\\\\d|2[09])\\\\d{4}\",[10]]]],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\",0,0,0,0,0,[[\"(?:[24]\\\\d|3[1-9]|50|65(?:02[12]|12[56]|22[89]|[3-5]00)|7(?:27\\\\d\\\\d|3100|5(?:02[12]|12[56]|22[89]|[34](?:00|81)|500))|8[0-5])\\\\d{3}\"],[\"73140\\\\d{3}|(?:630[01]|730[0-5])\\\\d{4}|[67]200[01]\\\\d{3}\",[8]],0,0,0,0,0,0,[\"30(?:0[01]\\\\d\\\\d|12(?:11|20))\\\\d\\\\d\",[8]]]],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]],0,0,0,0,0,0,[[\"7[4-7]\\\\d{5}\"],[\"[34]\\\\d{6}\"],0,[\"8\\\\d{6}\"]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\",[[\"869(?:2(?:29|36)|302|4(?:6[015-9]|70))\\\\d{4}\"],[\"869(?:5(?:5[6-8]|6[5-7])|66\\\\d|76[02-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|2)\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d|85)\\\\d{6}\",[8]],[\"19[1-3]\\\\d{7}\",[10]]]],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\",0,0,0,[[\"(?:2|3[1-3]|[46][1-4]|5[1-5])[1-9]\\\\d{6,7}|(?:3[1-3]|[46][1-4]|5[1-5])1\\\\d{2,3}\",[5,6,8,9,10]],[\"1[0-26-9]\\\\d{7,8}\",[9,10]],[\"00(?:308\\\\d{6,7}|798\\\\d{7,9})|(?:00368|80)\\\\d{7}\",[9,11,12,13,14]],[\"60[2-9]\\\\d{6}\",[9]],[\"50\\\\d{8,9}\",[10,11]],0,[\"1(?:5(?:22|44|66|77|88|99)|6(?:[07]0|44|6[16]|88)|8(?:00|33|55|77|99))\\\\d{4}\",[8]],[\"15\\\\d{7,8}\",[9,10]],[\"70\\\\d{8}\",[10]]]],\"KW\":[\"965\",\"00\",\"(?:18|[2569]\\\\d\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[25]\"]]],0,0,0,0,0,0,[[\"2(?:[23]\\\\d\\\\d|4(?:[1-35-9]\\\\d|44)|5(?:0[034]|[2-46]\\\\d|5[1-3]|7[1-7]))\\\\d{4}\",[8]],[\"(?:52(?:22|5[25])|6(?:222|70[013-9]|93[039])|9(?:11[01]|702))\\\\d{4}|(?:5(?:[05]\\\\d|1[0-7]|6[56])|6(?:0[034679]|5[015-9]|6\\\\d|7[67]|9[069])|9(?:0[09]|22|4[01479]|55|6[0679]|7[1-9]|8[057-9]|9\\\\d))\\\\d{5}\",[8]],[\"18\\\\d{5}\",[7]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\",[[\"345(?:2(?:22|44)|444|6(?:23|38|40)|7(?:4[35-79]|6[6-9]|77)|8(?:00|1[45]|25|[48]8)|9(?:14|4[035-9]))\\\\d{4}\"],[\"345(?:32[1-9]|5(?:1[67]|2[5-79]|4[6-9]|50|76)|649|9(?:1[67]|2[2-9]|3[689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:345976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"345849\\\\d{4}\"]]],\"KZ\":[\"7\",\"810\",\"33622\\\\d{5}|(?:7\\\\d|80)\\\\d{8}\",[10],0,\"8\",0,0,0,0,\"33|7\",[[\"(?:33622|7(?:1(?:0(?:[23]\\\\d|4[0-3]|59|63)|1(?:[23]\\\\d|4[0-79]|59)|2(?:[23]\\\\d|59)|3(?:2\\\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\\\d|3[013-9]|5[1-9])|5(?:2\\\\d|3[1-9]|4[0-7]|59)|6(?:[2-4]\\\\d|5[19]|61)|72\\\\d|8(?:[27]\\\\d|3[1-46-9]|4[0-5]))|2(?:1(?:[23]\\\\d|4[46-9]|5[3469])|2(?:2\\\\d|3[0679]|46|5[12679])|3(?:[2-4]\\\\d|5[139])|4(?:2\\\\d|3[1-35-9]|59)|5(?:[23]\\\\d|4[0-246-8]|59|61)|6(?:2\\\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\\\d|40|5[279])|8(?:[23]\\\\d|4[0-3]|59)|9(?:2\\\\d|3[124578]|59))))\\\\d{5}\"],[\"7(?:0[0-25-8]|47|6[02-4]|7[15-8]|85)\\\\d{7}\"],[\"800\\\\d{7}\"],[\"809\\\\d{7}\"],[\"808\\\\d{7}\"],0,0,0,[\"751\\\\d{7}\"]],\"8~10\"],\"LA\":[\"856\",\"00\",\"(?:2\\\\d|3)\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[13]|[35-7][14]|41|8[1468])\\\\d{6}\",[8]],[\"20(?:[29]\\\\d|5[24-689]|7[6-8])\\\\d{6}\",[10]],0,0,0,0,[\"30\\\\d{7}\",[9]]]],\"LB\":[\"961\",\"00\",\"[7-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"]]],\"0\",0,0,0,0,0,[[\"(?:(?:[14-69]\\\\d|8[02-9])\\\\d|7(?:[2-57]\\\\d|62|8[0-7]|9[04-9]))\\\\d{4}\",[7]],[\"(?:(?:3|81)\\\\d|7(?:[01]\\\\d|6[013-9]|8[89]|9[1-3]))\\\\d{5}\"],0,[\"9[01]\\\\d{6}\",[8]],0,0,0,0,0,[\"80\\\\d{6}\",[8]]]],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"758$1\",0,\"758\",[[\"758(?:4(?:30|5\\\\d|6[2-9]|8[0-2])|57[0-2]|638)\\\\d{4}\"],[\"758(?:28[4-7]|384|4(?:6[01]|8[4-9])|5(?:1[89]|20|84)|7(?:1[2-9]|2\\\\d|3[01]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"LI\":[\"423\",\"00\",\"90\\\\d{5}|(?:[2378]|6\\\\d\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(10(?:01|20|66))\",0,0,0,[[\"(?:2(?:01|1[27]|22|3\\\\d|6[02-578]|96)|3(?:33|40|7[0135-7]|8[048]|9[0269]))\\\\d{4}\",[7]],[\"756\\\\d{4}|(?:6(?:499|5[0-3]\\\\d|6(?:0[0-7]|10|2[06-9]|39))|7[37-9])\\\\d{5}\"],[\"80(?:02[28]|9\\\\d\\\\d)\\\\d\\\\d\",[7]],[\"90(?:02[258]|1(?:23|3[14])|66[136])\\\\d\\\\d\",[7]],0,0,[\"870(?:28|87)\\\\d\\\\d\",[7]]]],\"LK\":[\"94\",\"00\",\"(?:[1-7]\\\\d|[89]1)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[189]1|2[13-7]|3[1-8]|4[157]|5[12457]|6[35-7])[2-57]\\\\d{6}\"],[\"7[0-25-8]\\\\d{7}\"],0,0,0,0,[\"1973\\\\d{5}\"]]],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[45]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d{3}|33333)\\\\d{4}\",[8,9]],[\"(?:(?:330|555|(?:77|88)\\\\d)\\\\d|4[67])\\\\d{5}|5\\\\d{6}\",[7,9]],0,[\"332(?:02|[34]\\\\d)\\\\d{4}\",[9]]]],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"[56]\\\\d{7}\"],[\"800[256]\\\\d{4}\"]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-79]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\",0,0,0,[[\"(?:3[1478]|4[124-6]|52)\\\\d{6}\"],[\"6\\\\d{7}\"],[\"800\\\\d{5}\"],[\"9(?:0[0239]|10)\\\\d{5}\"],[\"700\\\\d{5}\"],0,[\"70[67]\\\\d{5}\"],0,0,[\"808\\\\d{5}\"]]],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\",0,0,0,[[\"(?:35[013-9]|80[2-9]|90[89])\\\\d{1,8}|(?:2[2-9]|3[0-46-9]|[457]\\\\d|8[13-9]|9[2-579])\\\\d{2,9}\"],[\"6(?:[269][18]|5[158]|7[189]|81)\\\\d{6}\",[9]],[\"800\\\\d{5}\",[8]],[\"90[015]\\\\d{5}\",[8]],0,0,0,0,[\"20(?:1\\\\d{5}|[2-689]\\\\d{1,7})\",[4,5,6,7,8,9,10]],[\"801\\\\d{5}\",[8]]]],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]],0,0,0,0,0,0,[[\"6\\\\d{7}\"],[\"2\\\\d{7}\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"],0,0,0,0,0,[\"81\\\\d{6}\"]]],\"LY\":[\"218\",\"00\",\"(?:[2569]\\\\d|71)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[25-79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[13-5]|5[1347]|6[1-479]|71)\\\\d{7}\"],[\"9[1-6]\\\\d{7}\"]]],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:2(?:[015-79]\\\\d|2[02-9]|3[2-57]|4[2-8]|8[235-7])|3(?:[0-48]\\\\d|[57][2-9]|6[2-8]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[06-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"5924[01]\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"870\\\\d{5}|(?:[349]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:870|9[2-47-9]\\\\d)\\\\d{5}\",[8]],[\"4(?:4\\\\d|5[1-9])\\\\d{5}|(?:3|6\\\\d)\\\\d{7}\"],[\"90\\\\d{6}\",[8]]]],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:2[1-9]|3[1-79])\\\\d|5(?:33|5[257]))\\\\d{5}\"],[\"(?:562|6\\\\d\\\\d|7(?:[189]\\\\d|6[07]|7[457-9]))\\\\d{5}\"],[\"800\\\\d{5}\"],[\"90[056]\\\\d{5}\"],0,0,[\"803\\\\d{5}\"],0,[\"3[08]\\\\d{6}\"],[\"808\\\\d{5}\"]]],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:20[2-8]|3(?:[0-2][2-7]|3[24-7])|4(?:0[2-467]|1[2467])|5(?:[01][2467]|2[2-467]))\\\\d{5}\",[8]],[\"6(?:00|3[024]|6[0-25]|[7-9]\\\\d)\\\\d{5}\",[8]],[\"80(?:[0-2578]|9\\\\d)\\\\d{5}\"],[\"9(?:4[1568]|5[178])\\\\d{5}\",[8]],0,0,[\"77[1-9]\\\\d{5}\",[8]],0,[\"78[1-49]\\\\d{5}\",[8]]]],\"MF\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\",0,0,[[\"2072[29]\\\\d{4}|20(?:2\\\\d|4[47]|5[3467]|6[279]|7[35]|8[268]|9[245])\\\\d{5}\"],[\"3[2-49]\\\\d{7}\"],0,0,0,0,0,0,[\"22\\\\d{7}\"]]],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\",0,0,0,0,0,[[\"(?:247|528|625)\\\\d{4}\"],[\"(?:(?:23|54)5|329|45[56])\\\\d{4}\"],0,0,0,0,0,0,[\"635\\\\d{4}\"]]],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:[23]\\\\d|5[0-24578]|6[01]|82)|3(?:1[3-68]|[23][2-68]|4[23568])|4(?:[23][2-68]|4[3-68]|5[2568]|6[25-8]|7[24-68]|8[4-68]))\\\\d{5}\"],[\"7(?:(?:[0-25-8]\\\\d|3[2-4]|9[23])\\\\d|421)\\\\d{4}\"],[\"800\\\\d{5}\"],[\"5[02-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:0[1-9]|[1-9]\\\\d)\\\\d{5}\"]]],\"ML\":[\"223\",\"00\",\"(?:[246-9]\\\\d|50)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]],0,0,0,0,0,0,[[\"2(?:07[0-8]|12[67])\\\\d{4}|(?:2(?:02|1[4-689])|4(?:0[0-4]|4[1-39]))\\\\d{5}\"],[\"2(?:079|17\\\\d)\\\\d{4}|(?:50|[679]\\\\d|8[239])\\\\d{6}\"],[\"80\\\\d{6}\"]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:2\\\\d|3[56]|[89][0-6])\\\\d|4(?:2[2-469]|39|46|6[25]|7[0-2])|6)|2(?:2(?:00|8[34])|4(?:0\\\\d|2[246]|39|46|62|7[0-2])|51\\\\d\\\\d)|4(?:2(?:2\\\\d\\\\d|48[0-2])|[34]20\\\\d)|6(?:0(?:[23]|88\\\\d)|(?:124|320|[56]2\\\\d)\\\\d|247[23]|4(?:2[04]\\\\d|47[23])|7(?:(?:3\\\\d|8[01459])\\\\d|4(?:39|60|7[01])))|8(?:[1-3]2\\\\d|5(?:2\\\\d|4[1-9]))\\\\d)\\\\d{4}|5(?:2(?:2\\\\d{5,6}|47[023]\\\\d{4})|(?:347[23]|42(?:1|86)|(?:522|820)\\\\d|7(?:20\\\\d|48[0-2])|9(?:20\\\\d|47[01]))\\\\d{4})|7(?:120\\\\d{4,5}|(?:425\\\\d|5(?:202|96\\\\d))\\\\d{4})|(?:(?:1[2-6]\\\\d|4(?:2[24-8]|356|[46][2-6]|5[35])|5(?:[27][2-8]|3[2-68]|4[25-8]|5[23]|6[2-4]|8[25-7]|9[2-7])|6(?:[19]20|42[03-6]|(?:52|7[45])\\\\d)|7(?:[04][25-8]|[15][235-7]|22|3[2-4]))\\\\d|8(?:[135]2\\\\d\\\\d|2(?:2\\\\d\\\\d|320)))\\\\d{3}|25\\\\d{5,6}|(?:2[2-9]|43[235-7]|6(?:1[2356]|[24][2-6]|3[256]|5[2-4]|6[2-8]|7[235-7]|8[245]|9[24])|8(?:1[235689]|2[2-8]|32|4[24-7]|5[245]|6[23]))\\\\d{4}|(?:4[35]|5[48]|63|7[0145]|8[13])470\\\\d{4}|(?:4[35]|5[48]|63|7[0145]|8[13])4\\\\d{4}\",[6,7,8,9]],[\"(?:17[01]|9(?:2(?:[0-4]|[56]\\\\d\\\\d)|(?:3(?:[0-36]|4\\\\d)|(?:6[89]|89)\\\\d|7(?:3|5[0-2]|[6-9]\\\\d))\\\\d|4(?:(?:[0245]\\\\d|[1379])\\\\d|88)|5[0-6]|9(?:[089]|[5-7]\\\\d\\\\d))\\\\d)\\\\d{4}|9[69]1\\\\d{6}|9[68]\\\\d{6}\",[7,8,9,10]],[\"80080(?:[01][1-9]|2\\\\d)\\\\d{3}\",[10]],0,0,0,0,0,[\"1333\\\\d{4}|[12]468\\\\d{4}\",[8]]]],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[12](?:3[2-8]|4[2-68]|5[1-4689])\\\\d{6,7}|(?:11(?:3\\\\d|4[568])|(?:(?:21|5[0568])\\\\d|70[0-5])\\\\d)\\\\d{4}|[12]2(?:[1-3]\\\\d{5,6}|7\\\\d{6})\"],[\"(?:8(?:[05689]\\\\d|3[01])|9(?:[014-9]\\\\d|20|3[0-4]))\\\\d{5}\",[8]],0,0,0,0,0,0,[\"7(?:100|5(?:0[0579]|1[015]|[389]5|[57][57])|(?:6[0167]|7\\\\d|8[01])\\\\d)\\\\d{4}\",[8]]]],\"MO\":[\"853\",\"00\",\"(?:28|[68]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]],0,0,0,0,0,0,[[\"(?:28[2-57-9]|8(?:11|[2-57-9]\\\\d))\\\\d{5}\"],[\"6(?:[2356]\\\\d\\\\d|8(?:[02][5-9]|[1478]\\\\d|[356][0-4]))\\\\d{4}\"]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\",[[\"670(?:2(?:3[3-7]|56|8[5-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MQ\":[\"596\",\"00\",\"(?:596|69\\\\d)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"596(?:0[0-7]|10|2[7-9]|3[05-9]|4[0-46-8]|[5-7]\\\\d|8[09]|9[4-8])\\\\d{4}\"],[\"69(?:6(?:[0-47-9]\\\\d|5[0-6]|6[0-4])|727)\\\\d{4}\"]]],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]],0,0,0,0,0,0,[[\"(?:25[08]|35\\\\d|45[1-7])\\\\d{5}\"],[\"[2-4][0-46-9]\\\\d{6}\"],[\"800\\\\d{5}\"]]],\"MS\":[\"1\",\"011\",\"66449\\\\d{5}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(4\\\\d{6})$\",\"664$1\",0,\"664\",[[\"664491\\\\d{4}\"],[\"66449[2-6]\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]],0,0,0,0,0,0,[[\"203[1-4]\\\\d{4}|2(?:0[169]|[1-357]\\\\d)\\\\d{5}\"],[\"(?:7(?:210|[79]\\\\d\\\\d)|9(?:2(?:1[01]|31)|69[67]|8(?:1[1-3]|89|97)|9\\\\d\\\\d))\\\\d{4}\"],[\"800[3467]\\\\d{4}\"],[\"5(?:0(?:0(?:37|43)|(?:6\\\\d|70|9[0168])\\\\d)|[12]\\\\d0[1-5])\\\\d{3}\"],0,0,[\"501\\\\d{5}\"],[\"7117\\\\d{4}\"],[\"3550\\\\d{4}\"]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[2-468]|5\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]]],0,0,0,0,0,0,[[\"(?:2(?:[03478]\\\\d|1[0-7]|6[0-79])|4(?:[013568]\\\\d|2[4-7])|54(?:[34]\\\\d|71)|6\\\\d\\\\d|8(?:14|3[129]))\\\\d{4}\"],[\"5(?:4(?:2[1-389]|7[1-9])|87[15-8])\\\\d{4}|5(?:2[589]|4[3489]|7\\\\d|8[0-689]|9[0-8])\\\\d{5}\",[8]],[\"80[0-2]\\\\d{4}\",[7]],[\"30\\\\d{5}\",[7]],0,0,0,0,[\"3(?:20|9\\\\d)\\\\d{4}\",[7]]],\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[14-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"(?:3(?:0[0-3]|3[0-59])|6(?:[57][02468]|6[024-68]|8[024689]))\\\\d{4}\",[7]],[\"46[46]\\\\d{4}|(?:7[2-9]|9[14-9])\\\\d{5}\",[7]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]],0,0,[\"4[05]0\\\\d{4}\",[7]]],\"00\"],\"MW\":[\"265\",\"00\",\"1\\\\d{6}(?:\\\\d{2})?|(?:[23]1|77|88|99)\\\\d{7}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[17-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[2-9]|21\\\\d\\\\d)\\\\d{5}\"],[\"111\\\\d{6}|(?:77|88|99)\\\\d{7}\",[9]],0,0,0,0,0,0,[\"31\\\\d{7}\",[9]]]],\"MX\":[\"52\",\"0[09]\",\"(?:1\\\\d|[2-9])\\\\d{9}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],\"01 $1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],\"01 $1\",1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],\"044 $1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],\"044 $1\",0,\"$1 $2 $3 $4\"]],\"01\",0,\"0[12]|04[45]([2-9]\\\\d{9})$\",\"1$1\",0,0,[[\"(?:2(?:0[01]|2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))\\\\d{7}\",[10]],[\"(?:1(?:2(?:2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))|2(?:2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))\\\\d{7}\"],[\"8(?:00|88)\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]],[\"500\\\\d{7}\",[10]],0,0,0,0,[\"300\\\\d{7}\",[10]]],\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[0249]|[367][2-9]|8[1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:2[0-36-9]|3[0-368]|4[0-278]|5[0-24-8]|6[0-467]|7[1246-9]|8\\\\d|9[0-57])\\\\d|4(?:2[0-689]|[3-79]\\\\d|8[1-35689])|5(?:2[0-589]|[3468]\\\\d|5[0-489]|7[1-9]|9[23])|6(?:2[2-9]|3[1357-9]|[46]\\\\d|5[0-6]|7[0-35-9]|85|9[015-8])|7(?:[2579]\\\\d|3[03-68]|4[0-8]|6[5-9]|8[0-35-9])|8(?:[24][2-8]|3[2-5]|5[2-7]|6[2-589]|7[2-578]|[89][2-9])|9(?:0[57]|13|[25-7]\\\\d|[3489][0-8]))\\\\d{5}\",[8,9]],[\"1(?:4400|8(?:47|8[27])[0-4])\\\\d{4}|1(?:0(?:[23568]\\\\d|4[0-6]|7[016-9]|9[0-8])|1(?:[1-5]\\\\d\\\\d|6(?:0[5-9]|[1-9]\\\\d))|(?:[23679][2-9]|4[235-9]|59\\\\d)\\\\d|8(?:1[23]|[236]\\\\d|4[06]|5[7-9]|7[016-9]|8[01]|9[0-8]))\\\\d{5}\",[9,10]],[\"1[378]00\\\\d{6}\",[10]],[\"1600\\\\d{6}\",[10]],0,0,0,0,[\"154(?:6(?:0\\\\d|1[0-3])|8(?:[25]1|4[0189]|7[0-4679]))\\\\d{4}\",[10]]]],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-7]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"2(?:[1346]\\\\d|5[0-2]|[78][12]|93)\\\\d{5}\",[8]],[\"8[2-7]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"6(?:1(?:[02-4]\\\\d\\\\d|17)|2(?:17|54\\\\d|69|70)|3(?:17|2[0237]\\\\d|34|6[289]|7[01]|81)|4(?:17|(?:27|41|5[25])\\\\d|69|7[01])|5(?:17|2[236-8]\\\\d|69|7[01])|6(?:17|26\\\\d|38|42|69|7[01])|7(?:17|(?:2[2-4]|30)\\\\d|6[89]|7[01]))\\\\d{4}|6(?:1(?:2[2-7]|3[01378]|4[0-4]|69|7[014])|25[0-46-8]|32\\\\d|4(?:2[0-27]|4[016]|5[0-357])|52[02-9]|62[56]|7(?:2[2-69]|3[013]))\\\\d{4}\"],[\"(?:60|8[1245])\\\\d{7}\",[9]],[\"80\\\\d{7}\",[9]],[\"8701\\\\d{5}\",[9]],0,0,0,0,[\"8(?:3\\\\d\\\\d|86)\\\\d{5}\"]]],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[[\"(?:2[03-9]|3[0-5]|4[1-7]|88)\\\\d{4}\"],[\"(?:5[0-4]|[79]\\\\d|8[0-79])\\\\d{4}\"],0,[\"36\\\\d{4}\"]]],\"NE\":[\"227\",\"00\",\"[0289]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[01]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:20|3[1-8]|4[13-5]|5[14]|6[14578]|7[1-578])|1(?:4[145]|5[14]|6[14-68]|7[169]|88))\\\\d{4}\"],[\"(?:8[04589]|9\\\\d)\\\\d{6}\"],[\"08\\\\d{6}\"],[\"09\\\\d{6}\"]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"3\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\",0,0,[[\"(?:1(?:06|17|28|39)|3[0-2]\\\\d)\\\\d{3}\"],[\"3[58]\\\\d{4}\"]]],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:[1-356]\\\\d|4[02-8]|7[0-79]|8[2-9])\\\\d|9(?:0[3-9]|[1-9]\\\\d))\\\\d{5}|(?:[12]\\\\d|4[147]|5[14579]|6[1578]|7[0-3578])\\\\d{5}\",[7,8]],[\"(?:707[0-3]|8(?:01|19)[01])\\\\d{6}|(?:70[1-689]|8(?:0[2-9]|1[0-8])|90[1-35-9])\\\\d{7}\",[10]],[\"800\\\\d{7,11}\",[10,11,12,13,14]],0,0,0,[\"700\\\\d{7,11}\",[10,11,12,13,14]]]],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"(?:5(?:5[0-7]|[78]\\\\d)|6(?:20|3[035]|4[045]|5[05]|77|8[1-9]|9[059])|(?:7[5-8]|8\\\\d)\\\\d)\\\\d{5}\"],[\"1800\\\\d{4}\"]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|[89]\\\\d{6,9}|1\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:[035]\\\\d|1[13-578]|6[124-8]|7[24]|8[0-467])|2(?:[0346]\\\\d|2[2-46-9]|5[125]|9[479])|3(?:[03568]\\\\d|1[3-8]|2[01]|4[1-8])|4(?:[0356]\\\\d|1[1-368]|7[58]|8[15-8]|9[23579])|5(?:[0358]\\\\d|[19][1-9]|2[1-57-9]|4[13-8]|6[126]|7[0-3578])|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"6[1-58]\\\\d{7}\",[9]],[\"800\\\\d{4,7}\",[7,8,9,10]],[\"90[069]\\\\d{4,7}\",[7,8,9,10]],0,0,[\"140(?:1[035]|2[0346]|3[03568]|4[0356]|5[0358]|8[458])|(?:140(?:1[16-8]|2[259]|3[124]|4[17-9]|5[124679]|7)|8[478]\\\\d{6})\\\\d\",[5,6,9]],[\"66\\\\d{7}\",[9]],[\"(?:85|91)\\\\d{7}\",[9]]]],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\",[[\"(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],0,[\"(?:0[2-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"NP\":[\"977\",\"00\",\"9\\\\d{9}|[1-9]\\\\d{7}\",[8,10],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"[1-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"1[0-6]\\\\d{6}|(?:2[13-79]|3[135-8]|4[146-9]|5[135-7]|6[13-9]|7[15-9]|8[1-46-9]|9[1-79])[2-6]\\\\d{5}\",[8]],[\"9(?:6[0-3]|7[245]|8[0-24-68])\\\\d{7}\",[10]]]],\"NR\":[\"674\",\"00\",\"(?:444|55\\\\d|888)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[458]\"]]],0,0,0,0,0,0,[[\"(?:444|888)\\\\d{4}\"],[\"55[4-9]\\\\d{4}\"]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,[[\"[47]\\\\d{3}\",[4]],[\"888[4-9]\\\\d{3}\",[7]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[28]\\\\d{7,9}|[346]\\\\d{7}|(?:508|[79]\\\\d)\\\\d{6,7}\",[8,9,10],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"24099\\\\d{3}|(?:3[2-79]|[49][2-9]|6[235-9]|7[2-57-9])\\\\d{6}\",[8]],[\"2[0-28]\\\\d{8}|2[0-27-9]\\\\d{7}|21\\\\d{6}\"],[\"508\\\\d{6,7}|80\\\\d{6,8}\"],[\"90\\\\d{6,7}\",[8,9]],[\"70\\\\d{7}\",[9]],0,0,[\"[28]6\\\\d{6,7}\",[8,9]]],\"00\"],\"OM\":[\"968\",\"00\",\"(?:[279]\\\\d{3}|500)\\\\d{4}|8007\\\\d{4,5}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[79]\"]]],0,0,0,0,0,0,[[\"2[2-6]\\\\d{6}\",[8]],[\"90[1-9]\\\\d{5}|(?:7[129]|9[1-9])\\\\d{6}\",[8]],[\"500\\\\d{4}|8007\\\\d{4,5}\"],[\"900\\\\d{5}\",[8]]]],\"PA\":[\"507\",\"00\",\"(?:[1-57-9]|6\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"6\"]]],0,0,0,0,0,0,[[\"(?:1(?:0\\\\d|1[479]|2[37]|3[0137]|4[17]|5[05]|[68][58]|7[0167]|9[39])|2(?:[0235-79]\\\\d|1[0-7]|4[013-9]|8[026-9])|3(?:[089]\\\\d|1[014-7]|2[0-35]|33|4[0-579]|55|6[068]|7[06-8])|4(?:00|3[0-579]|4\\\\d|7[0-57-9])|5(?:[01]\\\\d|2[0-7]|[56]0|79)|7(?:0[09]|2[0-26-8]|3[03]|4[04]|5[05-9]|6[05]|7[0-24-9]|8[7-9]|90)|8(?:09|2[89]|3\\\\d|4[0-24-689]|5[014]|8[02])|9(?:0[5-9]|1[0135-8]|2[036-9]|3[35-79]|40|5[0457-9]|6[05-9]|7[04-9]|8[35-8]|9\\\\d))\\\\d{4}\",[7]],[\"(?:1[16]1|21[89]|6(?:[02-9]\\\\d|1[0-6])\\\\d|8(?:1[01]|7[23]))\\\\d{4}\"],[\"800\\\\d{4}\",[7]],[\"(?:8(?:22|55|60|7[78]|86)|9(?:00|81))\\\\d{4}\",[7]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"19(?:[02-68]\\\\d|1[035-9]|7[0-689]|9[1-9])\\\\d{4}|(?:1[0-8]|4[1-4]|5[1-46]|6[1-7]|7[2-46]|8[2-4])\\\\d{6}\",[8]],[\"9\\\\d{8}\",[9]],[\"800\\\\d{5}\",[8]],[\"805\\\\d{5}\",[8]],[\"80[24]\\\\d{5}\",[8]],0,0,0,0,[\"801\\\\d{5}\",[8]]],0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"[48]\\\\d{7}|4\\\\d{5}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[48]\"]]],0,0,0,0,0,0,[[\"4(?:[09][4-689]\\\\d|4)\\\\d{4}\"],[\"8[7-9]\\\\d{6}\",[8]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,[[\"(?:64[1-9]|7730|85[02-46-9])\\\\d{4}|(?:3[0-2]|4[257]|5[34]|77[0-24]|9[78])\\\\d{5}\"],[\"775\\\\d{5}|(?:7[0-689]|81)\\\\d{6}\",[8]],[\"180\\\\d{4}\",[7]],0,0,0,0,0,[\"2(?:0[0-47]|7[568])\\\\d{4}\",[7]]],\"00\"],\"PH\":[\"63\",\"00\",\"(?:1800|8)\\\\d{7,9}|2\\\\d{5}(?:\\\\d{2})?|(?:[3-7]|9\\\\d)\\\\d{8}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"2\\\\d{5}(?:\\\\d{2})?|88(?:22\\\\d\\\\d|42)\\\\d{4}|88\\\\d{7}|(?:3[2-68]|4[2-9]|5[2-6]|6[2-58]|7[24578]|8[2-7])\\\\d{7}\",[6,8,9,10]],[\"(?:81[37]|9(?:0[5-9]|1[0-24-9]|2[0-35-9]|[35]\\\\d|4[235-9]|6[0-25-8]|7[1-9]|8[19]|9[4-9]))\\\\d{7}\",[10]],[\"1800\\\\d{7,9}\",[11,12,13]]]],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[025-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:(?:21|42)[2-9]|58[126])\\\\d{7}|(?:2[25]|4[0146-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\\\\d{6}|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8]))[2-9]\\\\d{5,6}\",[9,10]],[\"3(?:[014]\\\\d|2[0-5]|3[0-7]|55|64)\\\\d{7}\",[10]],[\"800\\\\d{5}\",[8]],[\"900\\\\d{5}\",[8]],[\"122\\\\d{6}\",[9]],0,[\"(?:2(?:[125]|3[2358]|4[2-4]|9[2-8])|4(?:[0-246-9]|5[3479])|5(?:[1-35-7]|4[2-467])|6(?:0[468]|[1-8])|7(?:[14]|2[236])|8(?:[16]|2[2-689]|3[23578]|4[3478]|5[2356])|9(?:1|22|3[27-9]|4[2-6]|6[3569]|9[2-7]))111\\\\d{6}\",[11,12]]]],\"PL\":[\"48\",\"00\",\"[1-57-9]\\\\d{6}(?:\\\\d{2})?|6\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"39|45|5[0137]|6[0469]|7[02389]|8[08]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-8]|9[145]\"]]],0,0,0,0,0,0,[[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])(?:[02-9]\\\\d{6}|1(?:[0-8]\\\\d{5}|9\\\\d{3}(?:\\\\d{2})?))\",[7,9]],[\"(?:45|5[0137]|6[069]|7[2389]|88)\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"70[01346-8]\\\\d{6}\",[9]],0,0,[\"804\\\\d{6}\",[9]],[\"64\\\\d{4,7}\"],[\"39\\\\d{7}\",[9]],[\"801\\\\d{6}\",[9]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[1-3]|50)\\\\d{4}\"],[\"(?:4[02-4]|5[05])\\\\d{4}\"]]],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\",[[\"(?:787|939)[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:22[2-47-9]|42[45]|82[01458]|92[369])\\\\d{5}\",[8]],[\"5[69]\\\\d{7}\",[9]],[\"1800\\\\d{6}\",[10]],0,0,0,0,0,0,[\"1700\\\\d{6}\",[10]]]],\"PT\":[\"351\",\"00\",\"(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"]]],0,0,0,0,0,0,[[\"2(?:[12]\\\\d|[35][1-689]|4[1-59]|6[1-35689]|7[1-9]|8[1-69]|9[1256])\\\\d{6}\"],[\"9(?:[1-36]\\\\d\\\\d|480)\\\\d{5}\"],[\"80[02]\\\\d{6}\"],[\"(?:6(?:0[178]|4[68])\\\\d|76(?:0[1-57]|1[2-47]|2[237]))\\\\d{5}\"],[\"884[0-4689]\\\\d{5}\"],0,[\"70(?:7\\\\d|8[17])\\\\d{5}\"],0,[\"30\\\\d{7}\"],[\"80(?:8\\\\d|9[1579])\\\\d{5}\"]]],\"PW\":[\"680\",\"01[12]\",\"(?:[25-8]\\\\d\\\\d|345|488|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:55|77)|345|488|5(?:35|44|87)|6(?:22|54|79)|7(?:33|47)|8(?:24|55|76)|900)\\\\d{4}\"],[\"(?:6[2-4689]0|77\\\\d|88[0-4])\\\\d{4}\"]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|(?:[2-46-9]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6[347]|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36])\\\\d{5,7}|(?:2(?:2[4-68]|7[15]|9[1-5])|3(?:18|3[167]|4[2357]|51)|4(?:3[12]|5[13]|9[1-47])|5(?:[1-4]\\\\d|5[02-4])|6(?:3[1-3]|44|7[1-46-8])|7(?:4[0-4]|6[1-578]|75|8[0-8])|858)\\\\d{5,6}\",[7,8,9]],[\"9(?:51|6[129]|[78][1-6]|9[1-5])\\\\d{6}\",[9]],0,0,0,0,[\"[2-9]0\\\\d{4,7}\"],0,[\"8700[0-4]\\\\d{4}\",[9]]]],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|[3-7]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]],0,0,0,0,0,0,[[\"4[04]\\\\d{6}\",[8]],[\"[35-7]\\\\d{7}\",[8]],[\"800\\\\d{4}\",[7]],0,0,0,0,[\"2(?:[12]\\\\d|61)\\\\d{4}\",[7]]]],\"RE\":[\"262\",\"00\",\"(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[268]\"],\"0$1\"]],\"0\",0,0,0,0,\"262|69|8\",[[\"262\\\\d{6}\"],[\"69(?:2\\\\d\\\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\\\d|5[05]|6[0-26]|7[0-27]|8[0-8]|9[0-479]))\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[237]\\\\d|[89]0)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[23][13-6]\\\\d{7}|(?:2(?:19\\\\d|[3-6]\\\\d9)|31\\\\d\\\\d)\\\\d\\\\d\"],[\"7120\\\\d{5}|7(?:[02-7]\\\\d|1[01]|8[03-8]|99)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"90[036]\\\\d{6}\",[9]],0,0,[\"37\\\\d{7}\",[9]],0,0,[\"801\\\\d{6}\",[9]]],0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:11[1-9]\\\\d|(?:2[389]|39)(?:0[2-9]|[2-9]\\\\d))\\\\d{3,8}|(?:1[02-9]|2[0-24-7]|3[0-8])[2-9]\\\\d{4,9}\",[7,8,9,10,11,12]],[\"6(?:[0-689]|7\\\\d)\\\\d{6,7}\",[8,9,10]],[\"800\\\\d{3,9}\"],[\"(?:78\\\\d|90[0169])\\\\d{3,7}\",[6,7,8,9,10]],0,0,[\"7[06]\\\\d{4,10}\"]]],\"RU\":[\"7\",\"810\",\"[347-9]\\\\d{9}\",[10],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"],\"8 ($1)\",1]],\"8\",0,0,0,0,\"3[04-689]|[489]\",[[\"(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\\\d{7}\"],[\"9\\\\d{9}\"],[\"80[04]\\\\d{7}\"],[\"80[39]\\\\d{7}\"],[\"808\\\\d{7}\"]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:06|2[258]\\\\d)\\\\d{6}\"],[\"7[238]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"900\\\\d{6}\",[9]]]],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,0,0,0,0,[[\"1(?:1\\\\d|2[24-8]|3[35-8]|4[3-68]|6[2-5]|7[235-7])\\\\d{6}\",[9]],[\"5(?:[013-689]\\\\d|7[0-36-8])\\\\d{6}\",[9]],[\"800\\\\d{7}\",[10]],[\"925\\\\d{6}\",[9]],0,0,[\"811\\\\d{7}\",[10]],0,0,[\"920\\\\d{6}\",[9]]]],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]],0,0,0,0,0,0,[[\"(?:1[4-79]|[23]\\\\d|4[0-2]|5[03]|6[0-37])\\\\d{3}\",[5]],[\"48\\\\d{3}|(?:(?:7[1-9]|8[4-9])\\\\d|9(?:1[2-9]|2[013-9]|3[0-2]|[46]\\\\d|5[0-46-9]|7[0-689]|8[0-79]|9[0-8]))\\\\d{4}\"],[\"1[38]\\\\d{3}\",[5]],0,0,0,0,0,[\"5[12]\\\\d{3}\",[5]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\d{3}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]\"]]],0,0,0,0,0,0,[[\"4[2-46]\\\\d{5}\"],[\"2[5-8]\\\\d{5}\"],[\"8000\\\\d{3}\"],0,0,0,0,0,[\"971\\\\d{4}|(?:64|95)\\\\d{5}\"]],\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:5[3-7]|8[35-7])\\\\d{6}\"],[\"(?:1[0-2]|9[0-3569])\\\\d{7}\"]]],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[013689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\",0,0,0,0,0,[[\"10[1-8]\\\\d{6}|90[1-9]\\\\d{4,6}|(?:[12][136]|3[356]|4[0246]|6[03]|8\\\\d)\\\\d{5,7}|(?:1(?:2[0-35]|4[0-4]|5[0-25-9]|7[13-6]|[89]\\\\d)|2(?:2[0-7]|4[0136-8]|5[0138]|7[018]|8[01]|9[0-57])|3(?:0[0-4]|1\\\\d|2[0-25]|4[056]|7[0-2]|8[0-3]|9[023])|4(?:1[013-8]|3[0135]|5[14-79]|7[0-246-9]|8[0156]|9[0-689])|5(?:0[0-6]|[15][0-5]|2[0-68]|3[0-4]|4\\\\d|6[03-5]|7[013]|8[0-79]|9[01])|6(?:1[1-3]|2[0-4]|4[02-57]|5[0-37]|6[0-3]|7[0-2]|8[0247]|9[0-356])|9(?:1[0-68]|2\\\\d|3[02-5]|4[0-3]|5[0-4]|[68][01]|7[0135-8]))\\\\d{5,6}\",[7,8,9]],[\"7[02369]\\\\d{7}\",[9]],[\"20\\\\d{4,7}\",[6,7,8,9]],[\"649\\\\d{6}|9(?:00|39|44)[1-8]\\\\d{3,6}\",[7,8,9,10]],[\"75[1-8]\\\\d{6}\",[9]],0,0,[\"74[02-9]\\\\d{6}\",[9]],0,[\"77[0-7]\\\\d{6}\",[9]]]],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8[1-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"6[1-9]\\\\d{6}\",[8]],[\"(?:8[1-8]|9[0-8])\\\\d{6}\",[8]],[\"(?:18|8)00\\\\d{7}\",[10,11]],[\"1900\\\\d{7}\",[11]],0,0,[\"7000\\\\d{7}\",[11]],0,[\"3[12]\\\\d{6}\",[8]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\",[[\"2(?:[0-57-9]\\\\d|6[4-9])\\\\d\\\\d\"],[\"[56]\\\\d{4}\",[5]],0,0,0,0,0,0,[\"262\\\\d\\\\d\",[5]]]],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:[1-357][2-8]|4[24-8])\\\\d{6}\",[8]],[\"6(?:5(?:1\\\\d|55|[67]0)|9(?:10|[69]\\\\d))\\\\d{4}|(?:[37][01]|4[0139]|51|6[48])\\\\d{6}\",[8]],[\"80\\\\d{4,6}\",[6,7,8]],[\"89[1-3]\\\\d{2,5}|90\\\\d{4,6}\"],0,0,0,0,[\"(?:59\\\\d\\\\d|8(?:1(?:[67]\\\\d|8[01389])|2(?:0\\\\d|2[0378]|8[0-2489])|3[389]\\\\d))\\\\d{4}\",[8]]],\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[4589]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\",[[\"79\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],0,[\"(?:0[2-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:16|[2-9]\\\\d{3})|[3-5][1-8]\\\\d{3})\\\\d{4}|(?:2|[3-5][1-8])1[67]\\\\d{3}|[3-5][1-8]16\\\\d\\\\d\"],[\"909[1-9]\\\\d{5}|9(?:0[1-8]|1[0-24-9]|[45]\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"9(?:00|[78]\\\\d)\\\\d{6}\",[9]],0,0,[\"96\\\\d{7}\",[9]],[\"9090\\\\d{3}\",[7]],[\"6(?:02|5[0-4]|9[0-6])\\\\d{6}\",[9]],[\"8[5-9]\\\\d{7}\",[9]]]],\"SL\":[\"232\",\"00\",\"(?:[2-578]\\\\d|66|99)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[2-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"[235]2[2-4][2-9]\\\\d{4}\"],[\"(?:2[15]|3[013-5]|4[04]|5[05]|66|7[5-9]|8[08]|99)\\\\d{6}\"]]],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\",0,0,[[\"0549(?:8[0157-9]|9\\\\d)\\\\d{4}\",[10]],[\"6[16]\\\\d{6}\",[8]],0,[\"7[178]\\\\d{6}\",[8]],0,0,0,0,[\"5[158]\\\\d{6}\",[8]]]],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d{4}|93330)\\\\d{4}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]],0,0,0,0,0,0,[[\"3(?:0(?:1[0-2]|80)|282|3(?:8[1-9]|9[3-9])|611)\\\\d{5}\"],[\"7(?:[06-8]\\\\d|21|90)\\\\d{6}\"],[\"800\\\\d{6}\"],[\"88[4689]\\\\d{6}\"],0,0,0,0,[\"93330\\\\d{4}|3(?:392|9[01]\\\\d)\\\\d{5}\"],[\"81[02468]\\\\d{6}\"]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|(?:[1-4]\\\\d|59)\\\\d{5}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"1|2[0-79]|3[0-46-8]|4[0-7]|59\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79[0-8]|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[1-35-9]|799|9[2-9]\"]]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|2[0-79]|3[0-46-8]|4[0-7]|59)\\\\d{5}|(?:[134]\\\\d|8[125])\\\\d{4}\",[6,7]],[\"28\\\\d{5}|(?:6[1-9]|79)\\\\d{6,7}|(?:15|24|(?:3[59]|4[89]|8[08])\\\\d|60|7[1-8]|9(?:0[67]|[2-9]))\\\\d{6}\",[7,8,9]]]],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]],0,0,0,0,0,0,[[\"(?:2[1-3]|3[0-7]|(?:4|68)\\\\d|5[2-58])\\\\d{4}\"],[\"(?:7[124-7]|8[125-9])\\\\d{5}\",[7]],0,0,0,0,0,0,[\"56\\\\d{4}\",[6]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"18\\\\d{7}\"],[\"(?:12|9[1257])\\\\d{7}\"]]],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]],0,0,0,0,0,0,[[\"22\\\\d{5}\"],[\"900[5-9]\\\\d{3}|9(?:0[1-9]|[89]\\\\d)\\\\d{4}\"]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"2[1-6]\\\\d{6}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"800\\\\d{4}(?:\\\\d{4})?\",[7,11]],[\"900\\\\d{4}(?:\\\\d{4})?\",[7,11]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\",[[\"7215(?:4[2-8]|8[239]|9[056])\\\\d{4}\"],[\"7215(?:1[02]|2\\\\d|5[034679]|8[014-8])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"[12]1\\\\d{6,7}|(?:1(?:[2356]|4\\\\d)|2[235]|3(?:[13]\\\\d|4)|4[13]|5[1-3])\\\\d{6}\"],[\"9(?:22|[3-589]\\\\d|6[024-9])\\\\d{6}\",[9]]]],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]],0,0,0,0,0,0,[[\"[23][2-5]\\\\d{6}\",[8]],[\"7[6-9]\\\\d{6}\",[8]],[\"0800\\\\d{4}\",[8]],[\"900\\\\d{6}\",[9]],0,0,0,0,[\"70\\\\d{6}\",[8]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\",[[\"8\\\\d{3}\"]]],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\",[[\"649(?:712|9(?:4\\\\d|50))\\\\d{4}\"],[\"649(?:2(?:3[129]|4[1-7])|3(?:3[1-389]|4[1-8])|4[34][1-3])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"64971[01]\\\\d{4}\"]]],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,[[\"22(?:[37-9]0|5[0-5]|6[89])\\\\d{4}\"],[\"(?:6[023568]|77|9\\\\d)\\\\d{6}\"]],\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]],0,0,0,0,0,0,[[\"2(?:2[2-7]|3[23]|4[45]|55|6[67]|77)\\\\d{5}\"],[\"(?:7[09]|9[0-36-9])\\\\d{6}\"]]],\"TH\":[\"66\",\"00[1-9]\",\"1\\\\d{8,9}|(?:[2-57]|[689]\\\\d)\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"14|[3-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d|3[2-9]|4[2-5]|5[2-6]|7[3-7])\\\\d{6}\",[8]],[\"(?:14|6[1-6]|[89]\\\\d)\\\\d{7}\",[9]],[\"1800\\\\d{6}\",[10]],[\"1900\\\\d{6}\",[10]],0,0,0,0,[\"6[08]\\\\d{7}\",[9]]]],\"TJ\":[\"992\",\"810\",\"(?:[3-59]\\\\d|77|88)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"],0,1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"],0,1],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[457-9]\"],0,1]],\"8\",0,0,0,0,0,[[\"(?:3(?:1[3-5]|2[245]|3[12]|4[24-7]|5[25]|72)|4(?:46|74|87))\\\\d{6}\"],[\"41[18]\\\\d{6}|(?:5[05]|77|88|9[0-35-9])\\\\d{7}\"]],\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7],0,0,0,0,0,0,0,[[\"(?:2[2-4]|[34]\\\\d)\\\\d{2,5}\"],[\"7[2-4]\\\\d{2,5}\"]]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:2[1-5]|3[1-9]|4[1-4])\\\\d{5}\",[7]],[\"7[3-8]\\\\d{6}\",[8]],[\"80\\\\d{5}\",[7]],[\"90\\\\d{5}\",[7]],[\"70\\\\d{5}\",[7]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,[[\"(?:1(?:2\\\\d|3[1-9])|2(?:22|4[0-35-8])|3(?:22|4[03-9])|4(?:22|3[128]|4\\\\d|6[15])|5(?:22|5[7-9]|6[014-689]))\\\\d{5}\"],[\"6[1-9]\\\\d{6}\"]],\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[[\"81200\\\\d{3}|(?:3[0-2]|7\\\\d)\\\\d{6}\"],[\"3(?:001|[12]40)\\\\d{4}|(?:(?:[259]\\\\d|4[0-6])\\\\d|3(?:1[1-35]|6[0-4]|91))\\\\d{5}\"],[\"8010\\\\d{4}\"],[\"88\\\\d{6}\"],0,0,0,0,0,[\"8[12]10\\\\d{4}\"]]],\"TO\":[\"676\",\"00\",\"[78]\\\\d{6}|[2-478]\\\\d{4}|(?:080|[56])0\\\\d{3}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-6]|7[014]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"7[578]|8\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[1-8]|4[1-4]|[56]0|7[0149]|8[05])\\\\d{3}\",[5]],[\"(?:7[578]|8[46-9])\\\\d{5}\",[7]],[\"0800\\\\d{3}\",[7]]]],\"TR\":[\"90\",\"00\",\"(?:[2-58]\\\\d\\\\d|900)\\\\d{7}|4\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[0589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1]],\"0\",0,0,0,0,0,[[\"(?:2(?:[13][26]|[28][2468]|[45][268]|[67][246])|3(?:[13][28]|[24-6][2468]|[78][02468]|92)|4(?:[16][246]|[23578][2468]|4[26]))\\\\d{7}\",[10]],[\"56161\\\\d{5}|5(?:0[15-7]|1[06]|24|[34]\\\\d|5[1-59]|9[46])\\\\d{7}\",[10]],[\"800\\\\d{7}\",[10]],[\"(?:8[89]8|900)\\\\d{7}\",[10]],[\"592(?:21[12]|461)\\\\d{4}\",[10]],0,[\"(?:444|850\\\\d{3})\\\\d{4}\"],[\"512\\\\d{7}\",[10]]]],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\",[[\"868(?:2(?:01|1[89]|[23]\\\\d)|6(?:0[7-9]|1[02-8]|2[1-9]|[3-69]\\\\d|7[0-79])|82[124])\\\\d{4}\"],[\"868(?:2(?:6[6-9]|[7-9]\\\\d)|[37](?:0[1-9]|1[02-9]|[2-9]\\\\d)|4[6-9]\\\\d|6(?:20|78|8\\\\d))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],0,0,0,0,0,0,0,[[\"2[02-9]\\\\d{3}\",[5]],[\"(?:7[01]\\\\d|90)\\\\d{4}\",[6,7]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"(?:[24589]|7\\\\d)\\\\d{8}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25][2-8]|[346]|7[1-9]|8[237-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[258]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"24\\\\d{6,7}|8(?:2(?:3\\\\d|66)|36[24-9])\\\\d{4}|(?:2[235-8]\\\\d|3[2-9]|4(?:[239]\\\\d|[78])|5[2-8]|6[235-79]|7[1-9]|8[7-9])\\\\d{6}\",[8,9]],[\"9[0-8]\\\\d{7}\",[9]],[\"80[0-79]\\\\d{6}\",[9]],[\"20(?:[013-9]\\\\d\\\\d|2)\\\\d{4}\",[7,9]],[\"99\\\\d{7}\",[9]],0,[\"50[0-46-9]\\\\d{6}\",[9]],0,[\"70\\\\d{8}\",[10]]],0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[2-8]\\\\d{7}\"],[\"(?:6[2-9]|7[13-9])\\\\d{7}\"],[\"80[08]\\\\d{6}\"],[\"90\\\\d{7}\"],0,0,0,0,[\"41\\\\d{7}\"],[\"8(?:40|6[01])\\\\d{6}\"]]],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[1-8]|4[13-8]|5[1-7]|6[12459])\\\\d{7}\",[9]],[\"(?:50|6[36-8]|7[1-3]|9[1-9])\\\\d{7}\",[9]],[\"800[1-8]\\\\d{5,6}\"],[\"900[239]\\\\d{5,6}\"],0,0,0,0,[\"89[1-579]\\\\d{6}\",[9]]],\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"20(?:(?:240|30[0-4])\\\\d|6(?:00[0-2]|30[0-4]))\\\\d{3}|(?:20(?:[0147]\\\\d|[26][5-9]|3[2367]|5[0-4]|8[0-2])|[34]\\\\d{3})\\\\d{5}\"],[\"7260\\\\d{5}|7(?:[0157-9]\\\\d|2[03]|30|4[0-4])\\\\d{6}\"],[\"800[1-3]\\\\d{5}\"],[\"90[1-3]\\\\d{6}\"]]],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[67]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[017]|6[0-279]|78|8[0-2])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"710[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:[249]\\\\d\\\\d|80)\\\\d{5}|9\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d|4[2-7])\\\\d{6}\",[8]],[\"9[1-9]\\\\d{6}\",[8]],[\"80[05]\\\\d{4}\",[7]],[\"90[0-8]\\\\d{4}\",[7]]],\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"[679]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[679]\"],\"8 $1\"]],\"8\",0,0,0,0,0,[[\"78(?:1(?:13|2[02]|50)|2(?:10|2[139]|98)|77[01])\\\\d{4}|(?:6(?:1(?:22|3[124]|4[1-4]|5[1-3578]|64)|2(?:22|3[0-57-9]|41)|5(?:22|3[3-7]|5[024-8])|6\\\\d\\\\d|7(?:[23]\\\\d|7[69])|9(?:22|4[1-8]|6[135]))|7(?:0(?:5[4-9]|6[0146]|7[124-6]|9[135-8])|1[12]\\\\d|2(?:22|3[13-57-9]|4[1-3579]|5[14])|3(?:2\\\\d|3[1578]|4[1-35-7]|5[1-57]|61)|4(?:2\\\\d|3[1-579]|7[1-79])|5(?:22|5[1-9]|6[1457])|6(?:22|3[12457]|4[13-8])|9(?:22|5[1-9])))\\\\d{5}\"],[\"(?:6(?:1(?:2(?:2[01]|98)|35[0-4]|50\\\\d|61[23]|7(?:[01][017]|4\\\\d|55|9[5-9]))|2(?:(?:11|7\\\\d)\\\\d|2(?:[12]1|9[01379])|5(?:[126]\\\\d|3[0-4]))|5(?:19[01]|2(?:27|9[26])|(?:30|59|7\\\\d)\\\\d)|6(?:2(?:1[5-9]|2[0367]|38|41|52|60)|(?:3[79]|9[0-3])\\\\d|4(?:56|83)|7(?:[07]\\\\d|1[017]|3[07]|4[047]|5[057]|67|8[0178]|9[79]))|7(?:2(?:24|3[237]|4[5-9]|7[15-8])|5(?:7[12]|8[0589])|7(?:0\\\\d|[39][07])|9(?:0\\\\d|7[079]))|9(?:2(?:1[1267]|3[01]|5\\\\d|7[0-4])|(?:5[67]|7\\\\d)\\\\d|6(?:2[0-26]|8\\\\d)))|7(?:0\\\\d{3}|1(?:13[01]|6(?:0[47]|1[67]|66)|71[3-69]|98\\\\d)|2(?:2(?:2[79]|95)|3(?:2[5-9]|6[0-6])|57\\\\d|7(?:0\\\\d|1[17]|2[27]|3[37]|44|5[057]|66|88))|3(?:2(?:1[0-6]|21|3[469]|7[159])|(?:33|9[4-6])\\\\d|5(?:0[0-4]|5[579]|9\\\\d)|7(?:[0-3579]\\\\d|4[0467]|6[67]|8[078]))|4(?:2(?:29|5[0257]|6[0-7]|7[1-57])|5(?:1[0-4]|8\\\\d|9[5-9])|7(?:0\\\\d|1[024589]|2[0-27]|3[0137]|[46][07]|5[01]|7[5-9]|9[079])|9(?:7[015-9]|[89]\\\\d))|5(?:112|2(?:0\\\\d|2[29]|[49]4)|3[1568]\\\\d|52[6-9]|7(?:0[01578]|1[017]|[23]7|4[047]|[5-7]\\\\d|8[78]|9[079]))|6(?:2(?:2[1245]|4[2-4])|39\\\\d|41[179]|5(?:[349]\\\\d|5[0-2])|7(?:0[017]|[13]\\\\d|22|44|55|67|88))|9(?:22[128]|3(?:2[0-4]|7\\\\d)|57[02569]|7(?:2[05-9]|3[37]|4\\\\d|60|7[2579]|87|9[07])))|9[0-57-9]\\\\d{3})\\\\d{4}\"]],\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{6,10}|55\\\\d{8}|[08]\\\\d{5}|(?:3[0-8]|8)\\\\d{7,9}|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\",[[\"06698\\\\d{1,6}\"],[\"33\\\\d{9}|3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10,11]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\",[[\"784(?:266|3(?:6[6-9]|7\\\\d|8[0-24-6])|4(?:38|5[0-36-8]|8[0-8])|5(?:55|7[0-2]|93)|638|784)\\\\d{4}\"],[\"784(?:4(?:3[0-5]|5[45]|89|9[0-8])|5(?:2[6-9]|3[0-4]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VE\":[\"58\",\"00\",\"[89]00\\\\d{7}|(?:[24]\\\\d|50)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24589]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:12|3[457-9]|[467]\\\\d|[58][1-9]|9[1-6])|50[01])\\\\d{7}\"],[\"4(?:1[24-8]|2[46])\\\\d{7}\"],[\"800\\\\d{7}\"],[\"900\\\\d{7}\"]]],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\",[[\"284496[0-5]\\\\d{3}|284(?:229|4(?:22|9[45])|774|8(?:52|6[459]))\\\\d{4}\"],[\"284496[6-9]\\\\d{3}|284(?:3(?:0[0-3]|4[0-7]|68|9[34])|4(?:4[0-6]|68|99)|54[0-57])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\",[[\"340(?:2(?:01|2[06-8]|44|77)|3(?:32|44)|4(?:22|7[34])|5(?:1[34]|55)|6(?:26|4[23]|77|9[023])|7(?:1[2-57-9]|27|7\\\\d)|884|998)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"2(?:0[3-9]|1[0-689]|2[0-25-9]|3[2-9]|4[2-8]|5[124-9]|6[0-39]|7[0-7]|8[2-7]|9[0-4679])\\\\d{7}\",[10]],[\"(?:(?:3\\\\d|7[06-9])\\\\d|5(?:2[238]|[689]\\\\d)|8(?:[1-58]\\\\d|6[25-9]|79|9[689])|9(?:[0-8]\\\\d|9[013-9]))\\\\d{6}\",[9]],[\"1(?:228\\\\d{4}|800\\\\d{4,6})\",[8,9,10]],[\"1900\\\\d{4,6}\",[8,9,10]],0,0,[\"(?:[17]99|80\\\\d)\\\\d{4}|69\\\\d{5,6}\",[7,8]],0,[\"672\\\\d{6}\",[9]]]],\"VU\":[\"678\",\"00\",\"(?:[23]\\\\d|[48]8)\\\\d{3}|(?:[57]\\\\d|90)\\\\d{5}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]],0,0,0,0,0,0,[[\"(?:38[0-8]|48[4-9])\\\\d\\\\d|(?:2[02-9]|3[4-7]|88)\\\\d{3}\",[5]],[\"57[2-5]\\\\d{4}|(?:5[0-689]|7[013-7])\\\\d{5}\",[7]],0,0,0,0,[\"(?:3[03]|900\\\\d)\\\\d{3}\"],0,[\"90[1-9]\\\\d{4}\",[7]]]],\"WF\":[\"681\",\"00\",\"(?:[45]0|68|72|8\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[4-8]\"]]],0,0,0,0,0,0,[[\"(?:50|68|72)\\\\d{4}\"],[\"(?:50|68|72|8[23])\\\\d{4}\"]]],\"WS\":[\"685\",\"0\",\"[2-6]\\\\d{4}|8\\\\d{5}(?:\\\\d{4})?|[78]\\\\d{6}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-6]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"8\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:[2-5]\\\\d|6[1-9])\\\\d{3}\",[5]],[\"(?:7[25-7]|8(?:[3-7]|9\\\\d{3}))\\\\d{5}\",[7,10]],[\"800\\\\d{3}\",[6]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[89]|39)0\\\\d{6}|[23][89]\\\\d{6}\"],[\"4[3-79]\\\\d{6}\",[8]],[\"800\\\\d{5}\",[8]],[\"900\\\\d{5}\",[8]]]],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"17\\\\d{6}|(?:[12][2-68]|3[2358]|4[2-58]|5[2-6]|6[3-58]|7[24-68])\\\\d{5}\",[7,8]],[\"7[0137]\\\\d{7}\",[9]]]],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\",[[\"269(?:0[67]|5[01]|6\\\\d|[78]0)\\\\d{4}\"],[\"639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|[45]0|9[04-79])\\\\d{4}\"],[\"80\\\\d{7}\"]]],\"ZA\":[\"27\",\"00\",\"[1-9]\\\\d{8}|8\\\\d{4,7}\",[5,6,7,8,9],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[0-8]|2[1-378]|3[1-69]|4\\\\d|5[1346-8])\\\\d{7}\",[9]],[\"8[1-4]\\\\d{3,7}|(?:6\\\\d|7[0-46-9]|85)\\\\d{7}\"],[\"80\\\\d{7}\",[9]],[\"(?:86[2-9]|9[0-2]\\\\d)\\\\d{6}\",[9]],0,0,[\"861\\\\d{6}\",[9]],0,[\"87\\\\d{7}\",[9]],[\"860\\\\d{6}\",[9]]]],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|76|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"21[1-8]\\\\d{6}\"],[\"(?:76|9[5-8])\\\\d{7}\"],[\"800\\\\d{6}\"]]],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:3\\\\d|9)\\\\d|[4-8])|2(?:(?:(?:0(?:2[014]|5)|(?:2[0157]|31|84|9)\\\\d\\\\d|[56](?:[14]\\\\d\\\\d|20)|7(?:[089]|2[03]|[35]\\\\d\\\\d))\\\\d|4(?:2\\\\d\\\\d|8))\\\\d|1(?:2|[39]\\\\d{4}))|3(?:(?:123|(?:29\\\\d|92)\\\\d)\\\\d\\\\d|7(?:[19]|[56]\\\\d))|5(?:0|1[2-478]|26|[37]2|4(?:2\\\\d{3}|83)|5(?:25\\\\d\\\\d|[78])|[689]\\\\d)|6(?:(?:[16-8]21|28|52[013])\\\\d\\\\d|[39])|8(?:[1349]28|523)\\\\d\\\\d)\\\\d{3}|(?:4\\\\d\\\\d|9[2-9])\\\\d{4,5}|(?:(?:2(?:(?:(?:0|8[146])\\\\d|7[1-7])\\\\d|2(?:[278]\\\\d|92)|58(?:2\\\\d|3))|3(?:[26]|9\\\\d{3})|5(?:4\\\\d|5)\\\\d\\\\d)\\\\d|6(?:(?:(?:[0-246]|[78]\\\\d)\\\\d|37)\\\\d|5[2-8]))\\\\d\\\\d|(?:2(?:[569]\\\\d|8[2-57-9])|3(?:[013-59]\\\\d|8[37])|6[89]8)\\\\d{3}\"],[\"7(?:1[2-9]|[37][1-9]|8[2-7])\\\\d{6}\",[9]],[\"80(?:[01]\\\\d|20|8[0-8])\\\\d{3}\",[7]],0,0,0,0,0,[\"86(?:1[12]|22|30|44|55|77|8[368])\\\\d{6}\",[10]]]],\"001\":[\"979\",0,\"\\\\d{9}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,[\"\\\\d{9}\"]]]}}","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","import PhoneNumber from './PhoneNumber';\n\nexport default function getExampleNumber(country, examples, metadata) {\n\tif (examples[country]) {\n\t\treturn new PhoneNumber(country, examples[country], metadata);\n\t}\n}\n//# sourceMappingURL=getExampleNumber.js.map","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nexport default function searchNumbers() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (matcher.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: matcher.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n//# sourceMappingURL=searchNumbers.js.map","// Copy-pasted from `PhoneNumberMatcher.js`.\n\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\n\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\n\nvar OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B';\nvar CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D';\nvar NON_PARENS = '[^' + OPENING_PARENS + CLOSING_PARENS + ']';\n\nexport var LEAD_CLASS = '[' + OPENING_PARENS + PLUS_CHARS + ']';\n\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS);\n\n// Limit on the number of pairs of brackets in a phone number.\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\n\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n\t// Check the candidate doesn't contain any formatting\n\t// which would indicate that it really isn't a phone number.\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n\t\treturn;\n\t}\n\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\tif (leniency !== 'POSSIBLE') {\n\t\t// If the candidate is not at the start of the text,\n\t\t// and does not start with phone-number punctuation,\n\t\t// check the previous character.\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n\t\t\tvar previousChar = text[offset - 1];\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tvar lastCharIndex = offset + candidate.length;\n\t\tif (lastCharIndex < text.length) {\n\t\t\tvar nextChar = text[lastCharIndex];\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/;\n\n// Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\n\nexport default function isValidPreCandidate(candidate, offset, text) {\n\t// Skip a match that is more likely to be a date.\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\n\t\treturn false;\n\t}\n\n\t// Skip potential time-stamps.\n\tif (TIME_STAMPS.test(candidate)) {\n\t\tvar followingText = text.slice(offset + candidate.length);\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","import { trimAfterFirstMatch } from './util';\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\n\nexport default function parsePreCandidate(candidate) {\n\t// Check for extra numbers at the end.\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\n\t// from split notations (+41 79 123 45 67 / 68).\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","import isValidNumber from '../validate_';\nimport parseDigits from '../parseDigits';\n\nimport { startsWith, endsWith } from './util';\n\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    }\n\n    // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        }\n        // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n  if (metadata == null) {\n    return true;\n  }\n\n  // Check if a national prefix should be present when formatting this number.\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber);\n\n  // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    }\n\n    // Normalize the remainder.\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput());\n\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  }\n\n  // Now look for a second one.\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  }\n\n  // If the first slash is after the country calling code, this is permitted.\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */);\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  }\n\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  }\n\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata);\n\n  // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n  var endIndex = rfc3966Format.indexOf(';');\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  }\n\n  // The country-code will have a '-' following it.\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN);\n\n  // Set this to the last group, skipping it if the number has an extension.\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1;\n\n  // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  }\n\n  // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  }\n\n  // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  }\n\n  // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n    if (fromIndex < 0) {\n      return false;\n    }\n    // Moves {@code fromIndex} forward.\n    fromIndex += formattedNumberGroups[i].length();\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  }\n\n  // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\n\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache = function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  }\n\n  // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      }\n\n      //Update the cache map\n      this.cache[key] = this.head;\n      this.size++;\n    }\n\n    // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value;\n\n        // node removed from it's position and cache\n        this.remove(key);\n        // write node again to the head of LinkedList to make it most recently used\n        this.put(key, value);\n\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \" + key);\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    }\n\n    // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport default LRUCache;\n//# sourceMappingURL=LRUCache.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport LRUCache from './LRUCache';\n\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache = function () {\n\tfunction RegExpCache(size) {\n\t\t_classCallCheck(this, RegExpCache);\n\n\t\tthis.cache = new LRUCache(size);\n\t}\n\n\t_createClass(RegExpCache, [{\n\t\tkey: 'getPatternForRegExp',\n\t\tvalue: function getPatternForRegExp(pattern) {\n\t\t\tvar regExp = this.cache.get(pattern);\n\t\t\tif (!regExp) {\n\t\t\t\tregExp = new RegExp('^' + pattern);\n\t\t\t\tthis.cache.put(pattern, regExp);\n\t\t\t}\n\t\t\treturn regExp;\n\t\t}\n\t}]);\n\n\treturn RegExpCache;\n}();\n\nexport default RegExpCache;\n//# sourceMappingURL=RegExpCache.js.map","import PhoneNumberMatcher from './PhoneNumberMatcher';\n\nexport default function findNumbers(text, options, metadata) {\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\tvar results = [];\n\twhile (matcher.hasNext()) {\n\t\tresults.push(matcher.next());\n\t}\n\treturn results;\n}\n//# sourceMappingURL=findNumbers_.js.map","import _findNumbers from './findNumbers_';\nimport { normalizeArguments } from './parsePhoneNumber';\n\nexport default function findNumbers() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _findNumbers(text, options, metadata);\n}\n//# sourceMappingURL=findNumbers.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\n\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn parsePhoneNumber(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\n\nexport default function parsePhoneNumberFromString() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","import isValidNumber from './validate_';\n\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\nexport default function isValidNumberForRegion(input, country) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var metadata = arguments[3];\n\n  return input.country === country && isValidNumber(input, options, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion_.js.map","// Deprecated. Import from 'metadata.js' directly instead.\nexport { getCountryCallingCode as default } from './metadata';\n//# sourceMappingURL=getCountryCallingCode.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n//# sourceMappingURL=semver-compare.js.map","export { default as ParseError } from '../es6/ParseError'\r\nexport { default as parsePhoneNumber } from '../es6/parsePhoneNumber'\r\nexport { default as parsePhoneNumberFromString } from '../es6/parsePhoneNumberFromString'\r\n\r\nexport { default as findNumbers } from '../es6/findNumbers'\r\nexport { default as searchNumbers } from '../es6/searchNumbers'\r\nexport { default as PhoneNumberMatcher } from '../es6/PhoneNumberMatcher'\r\n\r\nexport { default as AsYouType } from '../es6/AsYouType'\r\n\r\nexport { default as Metadata, isSupportedCountry, getCountryCallingCode, getExtPrefix } from '../es6/metadata'\r\n\r\nexport { default as getExampleNumber } from '../es6/getExampleNumber'\r\n\r\nexport { default as formatIncompletePhoneNumber } from '../es6/formatIncompletePhoneNumber'\r\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from '../es6/parseIncompletePhoneNumber'\r\nexport { default as parseDigits } from '../es6/parseDigits'\r\n\r\nexport { parseRFC3966, formatRFC3966 } from '../es6/RFC3966'","// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from '../metadata.full.json.js'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tparsePhoneNumberFromString as _parsePhoneNumberFromString,\r\n\r\n\tfindNumbers as _findNumbers,\r\n\tsearchNumbers as _searchNumbers,\r\n\tPhoneNumberMatcher as _PhoneNumberMatcher,\r\n\r\n\tAsYouType as _AsYouType,\r\n\r\n\tisSupportedCountry as _isSupportedCountry,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tgetExtPrefix as _getExtPrefix,\r\n\r\n\tgetExampleNumber as _getExampleNumber,\r\n\r\n\tformatIncompletePhoneNumber as _formatIncompletePhoneNumber,\r\n\tparseIncompletePhoneNumber,\r\n\tparsePhoneNumberCharacter,\r\n\tparseDigits,\r\n\r\n\tparseRFC3966,\r\n\tformatRFC3966\r\n} from '../core/index'\r\n\r\nexport {\r\n\tParseError,\r\n\r\n\tparseIncompletePhoneNumber,\r\n\tparsePhoneNumberCharacter,\r\n\tparseDigits,\r\n\r\n\tparseRFC3966,\r\n\tformatRFC3966\r\n} from '../core/index'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function parsePhoneNumberFromString() {\r\n\treturn call(_parsePhoneNumberFromString, arguments)\r\n}\r\n\r\nexport function findNumbers() {\r\n\treturn call(_findNumbers, arguments)\r\n}\r\n\r\nexport function searchNumbers() {\r\n\treturn call(_searchNumbers, arguments)\r\n}\r\n\r\nexport function PhoneNumberMatcher(text, options) {\r\n\treturn _PhoneNumberMatcher.call(this, text, options, metadata)\r\n}\r\nPhoneNumberMatcher.prototype = Object.create(_PhoneNumberMatcher.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n\r\nexport function AsYouType(country) {\r\n\treturn _AsYouType.call(this, country, metadata)\r\n}\r\nAsYouType.prototype = Object.create(_AsYouType.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function getExtPrefix(country) {\r\n\treturn call(_getExtPrefix, arguments)\r\n}\r\n\r\nexport function getExampleNumber() {\r\n\treturn call(_getExampleNumber, arguments)\r\n}\r\n\r\nexport function formatIncompletePhoneNumber() {\r\n\treturn call(_formatIncompletePhoneNumber, arguments)\r\n}"],"sourceRoot":""}